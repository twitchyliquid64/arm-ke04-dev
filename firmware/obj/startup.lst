ARM GAS  /tmp/cc8trpVY.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"startup.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.align	1
  18              		.global	startup
  19              		.code	16
  20              		.thumb_func
  21              		.type	startup, %function
  22              	startup:
  23              	.LFB34:
  24              		.file 1 "src/startup.c"
   1:src/startup.c **** /**
   2:src/startup.c ****  * KE04 Loading Firmware
   3:src/startup.c ****  * Mid-level startup code
   4:src/startup.c ****  *
   5:src/startup.c ****  * originally by Kevin Cuzner
   6:src/startup.c ****  * modified by meh
   7:src/startup.c ****  */
   8:src/startup.c **** 
   9:src/startup.c ****  #include "MKE04Z4.h"
  10:src/startup.c ****  #include "pit.h"
  11:src/startup.c ****  #include "adc.h"
  12:src/startup.c **** #include <stdint.h>
  13:src/startup.c **** 
  14:src/startup.c **** /**
  15:src/startup.c ****  * Sets up the ICS module to FEI at approximately 48MHz with the peripheral
  16:src/startup.c ****  * clock at 24MHz
  17:src/startup.c ****  */
  18:src/startup.c **** static void setup_ICS(void)
  19:src/startup.c **** {
  20:src/startup.c ****     //we assume this is run soon after setup
  21:src/startup.c ****     ICS->C2 = 0x00; //bdiv=0
  22:src/startup.c ****     ICS->C1 = 0x04; //internal reference clock to FLL
  23:src/startup.c **** }
  24:src/startup.c **** 
  25:src/startup.c **** 
  26:src/startup.c **** 
  27:src/startup.c **** extern uint32_t _start_bss, _end_bss, _start_data, _data_size, _data_flash_addr;
  28:src/startup.c **** 
  29:src/startup.c **** void startup()
  30:src/startup.c **** {
  25              		.loc 1 30 0
  26              		.cfi_startproc
  27              	.LVL0:
ARM GAS  /tmp/cc8trpVY.s 			page 2


  28 0000 08B5     		push	{r3, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 3, -8
  31              		.cfi_offset 14, -4
  31:src/startup.c ****     /* Zero the BSS */
  32:src/startup.c ****     uint32_t *dest;
  33:src/startup.c ****     for (dest = &_start_bss; dest < &_end_bss; dest++)
  32              		.loc 1 33 0
  33 0002 0B4B     		ldr	r3, .L6
  34              	.LVL1:
  35              	.L2:
  36              		.loc 1 33 0 is_stmt 0 discriminator 1
  37 0004 0B49     		ldr	r1, .L6+4
  38 0006 0022     		mov	r2, #0
  39 0008 8B42     		cmp	r3, r1
  40 000a 01D2     		bcs	.L5
  34:src/startup.c ****         *dest = 0;
  41              		.loc 1 34 0 is_stmt 1 discriminator 3
  42 000c 04C3     		stmia	r3!, {r2}
  43              	.LVL2:
  44 000e F9E7     		b	.L2
  45              	.L5:
  46              	.LBB8:
  47              	.LBB9:
  21:src/startup.c ****     ICS->C1 = 0x04; //internal reference clock to FLL
  48              		.loc 1 21 0
  49 0010 094B     		ldr	r3, .L6+8
  50              	.LVL3:
  51              	.LBE9:
  52              	.LBE8:
  35:src/startup.c **** 
  36:src/startup.c ****     setup_ICS(); //set up the clock to our known 48MHz frequency
  37:src/startup.c ****     setup_PIT(PIT_2kHz);
  53              		.loc 1 37 0
  54 0012 0A48     		ldr	r0, .L6+12
  55              	.LBB11:
  56              	.LBB10:
  21:src/startup.c ****     ICS->C1 = 0x04; //internal reference clock to FLL
  57              		.loc 1 21 0
  58 0014 5A70     		strb	r2, [r3, #1]
  22:src/startup.c **** }
  59              		.loc 1 22 0
  60 0016 0432     		add	r2, r2, #4
  61 0018 1A70     		strb	r2, [r3]
  62              	.LBE10:
  63              	.LBE11:
  64              		.loc 1 37 0
  65 001a FFF7FEFF 		bl	setup_PIT
  66              	.LVL4:
  38:src/startup.c ****     setup_ADC();
  67              		.loc 1 38 0
  68 001e FFF7FEFF 		bl	setup_ADC
  69              	.LVL5:
  70              	.LBB12:
  71              	.LBB13:
  72              		.file 2 "include/core_cmFunc.h"
   1:include/core_cmFunc.h **** /**************************************************************************//**
ARM GAS  /tmp/cc8trpVY.s 			page 3


   2:include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:include/core_cmFunc.h ****  * @version  V3.20
   5:include/core_cmFunc.h ****  * @date     25. February 2013
   6:include/core_cmFunc.h ****  *
   7:include/core_cmFunc.h ****  * @note
   8:include/core_cmFunc.h ****  *
   9:include/core_cmFunc.h ****  ******************************************************************************/
  10:include/core_cmFunc.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:include/core_cmFunc.h **** 
  12:include/core_cmFunc.h ****    All rights reserved.
  13:include/core_cmFunc.h ****    Redistribution and use in source and binary forms, with or without
  14:include/core_cmFunc.h ****    modification, are permitted provided that the following conditions are met:
  15:include/core_cmFunc.h ****    - Redistributions of source code must retain the above copyright
  16:include/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer.
  17:include/core_cmFunc.h ****    - Redistributions in binary form must reproduce the above copyright
  18:include/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer in the
  19:include/core_cmFunc.h ****      documentation and/or other materials provided with the distribution.
  20:include/core_cmFunc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:include/core_cmFunc.h ****      to endorse or promote products derived from this software without
  22:include/core_cmFunc.h ****      specific prior written permission.
  23:include/core_cmFunc.h ****    *
  24:include/core_cmFunc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:include/core_cmFunc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:include/core_cmFunc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:include/core_cmFunc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:include/core_cmFunc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:include/core_cmFunc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:include/core_cmFunc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:include/core_cmFunc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:include/core_cmFunc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:include/core_cmFunc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:include/core_cmFunc.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:include/core_cmFunc.h ****    ---------------------------------------------------------------------------*/
  36:include/core_cmFunc.h **** 
  37:include/core_cmFunc.h **** 
  38:include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  39:include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  40:include/core_cmFunc.h **** 
  41:include/core_cmFunc.h **** 
  42:include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  43:include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  44:include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  45:include/core_cmFunc.h ****   @{
  46:include/core_cmFunc.h ****  */
  47:include/core_cmFunc.h **** 
  48:include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:include/core_cmFunc.h **** /* ARM armcc specific functions */
  50:include/core_cmFunc.h **** 
  51:include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  52:include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:include/core_cmFunc.h **** #endif
  54:include/core_cmFunc.h **** 
  55:include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  56:include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  57:include/core_cmFunc.h **** 
  58:include/core_cmFunc.h **** /** \brief  Get Control Register
ARM GAS  /tmp/cc8trpVY.s 			page 4


  59:include/core_cmFunc.h **** 
  60:include/core_cmFunc.h ****     This function returns the content of the Control Register.
  61:include/core_cmFunc.h **** 
  62:include/core_cmFunc.h ****     \return               Control Register value
  63:include/core_cmFunc.h ****  */
  64:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  65:include/core_cmFunc.h **** {
  66:include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  67:include/core_cmFunc.h ****   return(__regControl);
  68:include/core_cmFunc.h **** }
  69:include/core_cmFunc.h **** 
  70:include/core_cmFunc.h **** 
  71:include/core_cmFunc.h **** /** \brief  Set Control Register
  72:include/core_cmFunc.h **** 
  73:include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  74:include/core_cmFunc.h **** 
  75:include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  76:include/core_cmFunc.h ****  */
  77:include/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  78:include/core_cmFunc.h **** {
  79:include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  80:include/core_cmFunc.h ****   __regControl = control;
  81:include/core_cmFunc.h **** }
  82:include/core_cmFunc.h **** 
  83:include/core_cmFunc.h **** 
  84:include/core_cmFunc.h **** /** \brief  Get IPSR Register
  85:include/core_cmFunc.h **** 
  86:include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  87:include/core_cmFunc.h **** 
  88:include/core_cmFunc.h ****     \return               IPSR Register value
  89:include/core_cmFunc.h ****  */
  90:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  91:include/core_cmFunc.h **** {
  92:include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  93:include/core_cmFunc.h ****   return(__regIPSR);
  94:include/core_cmFunc.h **** }
  95:include/core_cmFunc.h **** 
  96:include/core_cmFunc.h **** 
  97:include/core_cmFunc.h **** /** \brief  Get APSR Register
  98:include/core_cmFunc.h **** 
  99:include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 100:include/core_cmFunc.h **** 
 101:include/core_cmFunc.h ****     \return               APSR Register value
 102:include/core_cmFunc.h ****  */
 103:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
 104:include/core_cmFunc.h **** {
 105:include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
 106:include/core_cmFunc.h ****   return(__regAPSR);
 107:include/core_cmFunc.h **** }
 108:include/core_cmFunc.h **** 
 109:include/core_cmFunc.h **** 
 110:include/core_cmFunc.h **** /** \brief  Get xPSR Register
 111:include/core_cmFunc.h **** 
 112:include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 113:include/core_cmFunc.h **** 
 114:include/core_cmFunc.h ****     \return               xPSR Register value
 115:include/core_cmFunc.h ****  */
ARM GAS  /tmp/cc8trpVY.s 			page 5


 116:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 117:include/core_cmFunc.h **** {
 118:include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 119:include/core_cmFunc.h ****   return(__regXPSR);
 120:include/core_cmFunc.h **** }
 121:include/core_cmFunc.h **** 
 122:include/core_cmFunc.h **** 
 123:include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 124:include/core_cmFunc.h **** 
 125:include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 126:include/core_cmFunc.h **** 
 127:include/core_cmFunc.h ****     \return               PSP Register value
 128:include/core_cmFunc.h ****  */
 129:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 130:include/core_cmFunc.h **** {
 131:include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 132:include/core_cmFunc.h ****   return(__regProcessStackPointer);
 133:include/core_cmFunc.h **** }
 134:include/core_cmFunc.h **** 
 135:include/core_cmFunc.h **** 
 136:include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 137:include/core_cmFunc.h **** 
 138:include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 139:include/core_cmFunc.h **** 
 140:include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 141:include/core_cmFunc.h ****  */
 142:include/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 143:include/core_cmFunc.h **** {
 144:include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 145:include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 146:include/core_cmFunc.h **** }
 147:include/core_cmFunc.h **** 
 148:include/core_cmFunc.h **** 
 149:include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 150:include/core_cmFunc.h **** 
 151:include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 152:include/core_cmFunc.h **** 
 153:include/core_cmFunc.h ****     \return               MSP Register value
 154:include/core_cmFunc.h ****  */
 155:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 156:include/core_cmFunc.h **** {
 157:include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 158:include/core_cmFunc.h ****   return(__regMainStackPointer);
 159:include/core_cmFunc.h **** }
 160:include/core_cmFunc.h **** 
 161:include/core_cmFunc.h **** 
 162:include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 163:include/core_cmFunc.h **** 
 164:include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 165:include/core_cmFunc.h **** 
 166:include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 167:include/core_cmFunc.h ****  */
 168:include/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 169:include/core_cmFunc.h **** {
 170:include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 171:include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 172:include/core_cmFunc.h **** }
ARM GAS  /tmp/cc8trpVY.s 			page 6


 173:include/core_cmFunc.h **** 
 174:include/core_cmFunc.h **** 
 175:include/core_cmFunc.h **** /** \brief  Get Priority Mask
 176:include/core_cmFunc.h **** 
 177:include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 178:include/core_cmFunc.h **** 
 179:include/core_cmFunc.h ****     \return               Priority Mask value
 180:include/core_cmFunc.h ****  */
 181:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 182:include/core_cmFunc.h **** {
 183:include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 184:include/core_cmFunc.h ****   return(__regPriMask);
 185:include/core_cmFunc.h **** }
 186:include/core_cmFunc.h **** 
 187:include/core_cmFunc.h **** 
 188:include/core_cmFunc.h **** /** \brief  Set Priority Mask
 189:include/core_cmFunc.h **** 
 190:include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 191:include/core_cmFunc.h **** 
 192:include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 193:include/core_cmFunc.h ****  */
 194:include/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 195:include/core_cmFunc.h **** {
 196:include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 197:include/core_cmFunc.h ****   __regPriMask = (priMask);
 198:include/core_cmFunc.h **** }
 199:include/core_cmFunc.h **** 
 200:include/core_cmFunc.h **** 
 201:include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 202:include/core_cmFunc.h **** 
 203:include/core_cmFunc.h **** /** \brief  Enable FIQ
 204:include/core_cmFunc.h **** 
 205:include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 206:include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 207:include/core_cmFunc.h ****  */
 208:include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 209:include/core_cmFunc.h **** 
 210:include/core_cmFunc.h **** 
 211:include/core_cmFunc.h **** /** \brief  Disable FIQ
 212:include/core_cmFunc.h **** 
 213:include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 214:include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 215:include/core_cmFunc.h ****  */
 216:include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 217:include/core_cmFunc.h **** 
 218:include/core_cmFunc.h **** 
 219:include/core_cmFunc.h **** /** \brief  Get Base Priority
 220:include/core_cmFunc.h **** 
 221:include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 222:include/core_cmFunc.h **** 
 223:include/core_cmFunc.h ****     \return               Base Priority register value
 224:include/core_cmFunc.h ****  */
 225:include/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 226:include/core_cmFunc.h **** {
 227:include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 228:include/core_cmFunc.h ****   return(__regBasePri);
 229:include/core_cmFunc.h **** }
ARM GAS  /tmp/cc8trpVY.s 			page 7


 230:include/core_cmFunc.h **** 
 231:include/core_cmFunc.h **** 
 232:include/core_cmFunc.h **** /** \brief  Set Base Priority
 233:include/core_cmFunc.h **** 
 234:include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 235:include/core_cmFunc.h **** 
 236:include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 237:include/core_cmFunc.h ****  */
 238:include/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 239:include/core_cmFunc.h **** {
 240:include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 241:include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 242:include/core_cmFunc.h **** }
 243:include/core_cmFunc.h **** 
 244:include/core_cmFunc.h **** 
 245:include/core_cmFunc.h **** /** \brief  Get Fault Mask
 246:include/core_cmFunc.h **** 
 247:include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 248:include/core_cmFunc.h **** 
 249:include/core_cmFunc.h ****     \return               Fault Mask register value
 250:include/core_cmFunc.h ****  */
 251:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 252:include/core_cmFunc.h **** {
 253:include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 254:include/core_cmFunc.h ****   return(__regFaultMask);
 255:include/core_cmFunc.h **** }
 256:include/core_cmFunc.h **** 
 257:include/core_cmFunc.h **** 
 258:include/core_cmFunc.h **** /** \brief  Set Fault Mask
 259:include/core_cmFunc.h **** 
 260:include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 261:include/core_cmFunc.h **** 
 262:include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 263:include/core_cmFunc.h ****  */
 264:include/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 265:include/core_cmFunc.h **** {
 266:include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 267:include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 268:include/core_cmFunc.h **** }
 269:include/core_cmFunc.h **** 
 270:include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 271:include/core_cmFunc.h **** 
 272:include/core_cmFunc.h **** 
 273:include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 274:include/core_cmFunc.h **** 
 275:include/core_cmFunc.h **** /** \brief  Get FPSCR
 276:include/core_cmFunc.h **** 
 277:include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 278:include/core_cmFunc.h **** 
 279:include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 280:include/core_cmFunc.h ****  */
 281:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 282:include/core_cmFunc.h **** {
 283:include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 284:include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 285:include/core_cmFunc.h ****   return(__regfpscr);
 286:include/core_cmFunc.h **** #else
ARM GAS  /tmp/cc8trpVY.s 			page 8


 287:include/core_cmFunc.h ****    return(0);
 288:include/core_cmFunc.h **** #endif
 289:include/core_cmFunc.h **** }
 290:include/core_cmFunc.h **** 
 291:include/core_cmFunc.h **** 
 292:include/core_cmFunc.h **** /** \brief  Set FPSCR
 293:include/core_cmFunc.h **** 
 294:include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 295:include/core_cmFunc.h **** 
 296:include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 297:include/core_cmFunc.h ****  */
 298:include/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 299:include/core_cmFunc.h **** {
 300:include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 301:include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 302:include/core_cmFunc.h ****   __regfpscr = (fpscr);
 303:include/core_cmFunc.h **** #endif
 304:include/core_cmFunc.h **** }
 305:include/core_cmFunc.h **** 
 306:include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 307:include/core_cmFunc.h **** 
 308:include/core_cmFunc.h **** 
 309:include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 310:include/core_cmFunc.h **** /* IAR iccarm specific functions */
 311:include/core_cmFunc.h **** 
 312:include/core_cmFunc.h **** #include <cmsis_iar.h>
 313:include/core_cmFunc.h **** 
 314:include/core_cmFunc.h **** 
 315:include/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 316:include/core_cmFunc.h **** /* TI CCS specific functions */
 317:include/core_cmFunc.h **** 
 318:include/core_cmFunc.h **** #include <cmsis_ccs.h>
 319:include/core_cmFunc.h **** 
 320:include/core_cmFunc.h **** 
 321:include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 322:include/core_cmFunc.h **** /* GNU gcc specific functions */
 323:include/core_cmFunc.h **** 
 324:include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 325:include/core_cmFunc.h **** 
 326:include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 327:include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 328:include/core_cmFunc.h ****  */
 329:include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 330:include/core_cmFunc.h **** {
 331:include/core_cmFunc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  73              		.loc 2 331 0
  74              	@ 331 "include/core_cmFunc.h" 1
  75 0022 62B6     		cpsie i
  76              	@ 0 "" 2
  77              		.code	16
  78              	.LBE13:
  79              	.LBE12:
  39:src/startup.c ****     __enable_irq();
  40:src/startup.c **** 
  41:src/startup.c ****     setup();
  80              		.loc 1 41 0
  81 0024 FFF7FEFF 		bl	setup
ARM GAS  /tmp/cc8trpVY.s 			page 9


  82              	.LVL6:
  42:src/startup.c ****     main();
  43:src/startup.c **** }
  83              		.loc 1 43 0
  84              		@ sp needed
  42:src/startup.c ****     main();
  85              		.loc 1 42 0
  86 0028 FFF7FEFF 		bl	main
  87              	.LVL7:
  88              		.loc 1 43 0
  89 002c 08BD     		pop	{r3, pc}
  90              	.L7:
  91 002e C046     		.align	2
  92              	.L6:
  93 0030 00000000 		.word	_start_bss
  94 0034 00000000 		.word	_end_bss
  95 0038 00400640 		.word	1074151424
  96 003c C05D0000 		.word	24000
  97              		.cfi_endproc
  98              	.LFE34:
  99              		.size	startup, .-startup
 100              	.Letext0:
 101              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stdint-gcc.h"
 102              		.file 4 "include/MKE04Z4.h"
 103              		.file 5 "include/pit.h"
 104              		.file 6 "include/adc.h"
 105              		.section	.debug_info,"",%progbits
 106              	.Ldebug_info0:
 107 0000 D3010000 		.4byte	0x1d3
 108 0004 0400     		.2byte	0x4
 109 0006 00000000 		.4byte	.Ldebug_abbrev0
 110 000a 04       		.byte	0x4
 111 000b 01       		.uleb128 0x1
 112 000c DA000000 		.4byte	.LASF20
 113 0010 01       		.byte	0x1
 114 0011 18000000 		.4byte	.LASF21
 115 0015 67000000 		.4byte	.LASF22
 116 0019 00000000 		.4byte	.Ltext0
 117 001d 40000000 		.4byte	.Letext0-.Ltext0
 118 0021 00000000 		.4byte	.Ldebug_line0
 119 0025 02       		.uleb128 0x2
 120 0026 01       		.byte	0x1
 121 0027 06       		.byte	0x6
 122 0028 95010000 		.4byte	.LASF0
 123 002c 02       		.uleb128 0x2
 124 002d 02       		.byte	0x2
 125 002e 05       		.byte	0x5
 126 002f 70010000 		.4byte	.LASF1
 127 0033 02       		.uleb128 0x2
 128 0034 04       		.byte	0x4
 129 0035 05       		.byte	0x5
 130 0036 8C010000 		.4byte	.LASF2
 131 003a 02       		.uleb128 0x2
 132 003b 08       		.byte	0x8
 133 003c 05       		.byte	0x5
 134 003d 58010000 		.4byte	.LASF3
 135 0041 03       		.uleb128 0x3
ARM GAS  /tmp/cc8trpVY.s 			page 10


 136 0042 10000000 		.4byte	.LASF6
 137 0046 03       		.byte	0x3
 138 0047 2E       		.byte	0x2e
 139 0048 4C000000 		.4byte	0x4c
 140 004c 02       		.uleb128 0x2
 141 004d 01       		.byte	0x1
 142 004e 08       		.byte	0x8
 143 004f 34000000 		.4byte	.LASF4
 144 0053 02       		.uleb128 0x2
 145 0054 02       		.byte	0x2
 146 0055 07       		.byte	0x7
 147 0056 54000000 		.4byte	.LASF5
 148 005a 03       		.uleb128 0x3
 149 005b 83010000 		.4byte	.LASF7
 150 005f 03       		.byte	0x3
 151 0060 34       		.byte	0x34
 152 0061 65000000 		.4byte	0x65
 153 0065 02       		.uleb128 0x2
 154 0066 04       		.byte	0x4
 155 0067 07       		.byte	0x7
 156 0068 42000000 		.4byte	.LASF8
 157 006c 02       		.uleb128 0x2
 158 006d 08       		.byte	0x8
 159 006e 07       		.byte	0x7
 160 006f C3000000 		.4byte	.LASF9
 161 0073 04       		.uleb128 0x4
 162 0074 04       		.byte	0x4
 163 0075 05       		.byte	0x5
 164 0076 696E7400 		.ascii	"int\000"
 165 007a 02       		.uleb128 0x2
 166 007b 04       		.byte	0x4
 167 007c 07       		.byte	0x7
 168 007d B6000000 		.4byte	.LASF10
 169 0081 02       		.uleb128 0x2
 170 0082 04       		.byte	0x4
 171 0083 07       		.byte	0x7
 172 0084 47010000 		.4byte	.LASF11
 173 0088 05       		.uleb128 0x5
 174 0089 41000000 		.4byte	0x41
 175 008d 06       		.uleb128 0x6
 176 008e 05       		.byte	0x5
 177 008f 04       		.byte	0x4
 178 0090 7705     		.2byte	0x577
 179 0092 D2000000 		.4byte	0xd2
 180 0096 07       		.uleb128 0x7
 181 0097 433100   		.ascii	"C1\000"
 182 009a 04       		.byte	0x4
 183 009b 7805     		.2byte	0x578
 184 009d 88000000 		.4byte	0x88
 185 00a1 00       		.byte	0
 186 00a2 07       		.uleb128 0x7
 187 00a3 433200   		.ascii	"C2\000"
 188 00a6 04       		.byte	0x4
 189 00a7 7905     		.2byte	0x579
 190 00a9 88000000 		.4byte	0x88
 191 00ad 01       		.byte	0x1
 192 00ae 07       		.uleb128 0x7
ARM GAS  /tmp/cc8trpVY.s 			page 11


 193 00af 433300   		.ascii	"C3\000"
 194 00b2 04       		.byte	0x4
 195 00b3 7A05     		.2byte	0x57a
 196 00b5 88000000 		.4byte	0x88
 197 00b9 02       		.byte	0x2
 198 00ba 07       		.uleb128 0x7
 199 00bb 433400   		.ascii	"C4\000"
 200 00be 04       		.byte	0x4
 201 00bf 7B05     		.2byte	0x57b
 202 00c1 88000000 		.4byte	0x88
 203 00c5 03       		.byte	0x3
 204 00c6 07       		.uleb128 0x7
 205 00c7 5300     		.ascii	"S\000"
 206 00c9 04       		.byte	0x4
 207 00ca 7C05     		.2byte	0x57c
 208 00cc 88000000 		.4byte	0x88
 209 00d0 04       		.byte	0x4
 210 00d1 00       		.byte	0
 211 00d2 08       		.uleb128 0x8
 212 00d3 7A010000 		.4byte	.LASF12
 213 00d7 04       		.byte	0x4
 214 00d8 7D05     		.2byte	0x57d
 215 00da 8D000000 		.4byte	0x8d
 216 00de 09       		.uleb128 0x9
 217 00df A9000000 		.4byte	.LASF13
 218 00e3 02       		.byte	0x2
 219 00e4 4901     		.2byte	0x149
 220 00e6 03       		.byte	0x3
 221 00e7 0A       		.uleb128 0xa
 222 00e8 06000000 		.4byte	.LASF14
 223 00ec 01       		.byte	0x1
 224 00ed 12       		.byte	0x12
 225 00ee 01       		.byte	0x1
 226 00ef 0B       		.uleb128 0xb
 227 00f0 50010000 		.4byte	.LASF23
 228 00f4 01       		.byte	0x1
 229 00f5 1D       		.byte	0x1d
 230 00f6 00000000 		.4byte	.LFB34
 231 00fa 40000000 		.4byte	.LFE34-.LFB34
 232 00fe 01       		.uleb128 0x1
 233 00ff 9C       		.byte	0x9c
 234 0100 84010000 		.4byte	0x184
 235 0104 0C       		.uleb128 0xc
 236 0105 26000000 		.4byte	.LASF24
 237 0109 01       		.byte	0x1
 238 010a 20       		.byte	0x20
 239 010b 84010000 		.4byte	0x184
 240 010f 00000000 		.4byte	.LLST0
 241 0113 0D       		.uleb128 0xd
 242 0114 00000000 		.4byte	.LASF15
 243 0118 01       		.byte	0x1
 244 0119 29       		.byte	0x29
 245 011a 73000000 		.4byte	0x73
 246 011e 24010000 		.4byte	0x124
 247 0122 0E       		.uleb128 0xe
 248 0123 00       		.byte	0
 249 0124 0D       		.uleb128 0xd
ARM GAS  /tmp/cc8trpVY.s 			page 12


 250 0125 9A000000 		.4byte	.LASF16
 251 0129 01       		.byte	0x1
 252 012a 2A       		.byte	0x2a
 253 012b 73000000 		.4byte	0x73
 254 012f 35010000 		.4byte	0x135
 255 0133 0E       		.uleb128 0xe
 256 0134 00       		.byte	0
 257 0135 0F       		.uleb128 0xf
 258 0136 E7000000 		.4byte	0xe7
 259 013a 10000000 		.4byte	.LBB8
 260 013e 00000000 		.4byte	.Ldebug_ranges0+0
 261 0142 01       		.byte	0x1
 262 0143 24       		.byte	0x24
 263 0144 10       		.uleb128 0x10
 264 0145 DE000000 		.4byte	0xde
 265 0149 22000000 		.4byte	.LBB12
 266 014d 02000000 		.4byte	.LBE12-.LBB12
 267 0151 01       		.byte	0x1
 268 0152 27       		.byte	0x27
 269 0153 11       		.uleb128 0x11
 270 0154 1E000000 		.4byte	.LVL4
 271 0158 A0010000 		.4byte	0x1a0
 272 015c 68010000 		.4byte	0x168
 273 0160 12       		.uleb128 0x12
 274 0161 01       		.uleb128 0x1
 275 0162 50       		.byte	0x50
 276 0163 03       		.uleb128 0x3
 277 0164 0A       		.byte	0xa
 278 0165 C05D     		.2byte	0x5dc0
 279 0167 00       		.byte	0
 280 0168 13       		.uleb128 0x13
 281 0169 22000000 		.4byte	.LVL5
 282 016d B1010000 		.4byte	0x1b1
 283 0171 13       		.uleb128 0x13
 284 0172 28000000 		.4byte	.LVL6
 285 0176 B8010000 		.4byte	0x1b8
 286 017a 13       		.uleb128 0x13
 287 017b 2C000000 		.4byte	.LVL7
 288 017f C9010000 		.4byte	0x1c9
 289 0183 00       		.byte	0
 290 0184 14       		.uleb128 0x14
 291 0185 04       		.byte	0x4
 292 0186 5A000000 		.4byte	0x5a
 293 018a 15       		.uleb128 0x15
 294 018b 8F000000 		.4byte	.LASF17
 295 018f 01       		.byte	0x1
 296 0190 1B       		.byte	0x1b
 297 0191 5A000000 		.4byte	0x5a
 298 0195 15       		.uleb128 0x15
 299 0196 2B000000 		.4byte	.LASF18
 300 019a 01       		.byte	0x1
 301 019b 1B       		.byte	0x1b
 302 019c 5A000000 		.4byte	0x5a
 303 01a0 16       		.uleb128 0x16
 304 01a1 9F000000 		.4byte	.LASF19
 305 01a5 05       		.byte	0x5
 306 01a6 05       		.byte	0x5
ARM GAS  /tmp/cc8trpVY.s 			page 13


 307 01a7 B1010000 		.4byte	0x1b1
 308 01ab 17       		.uleb128 0x17
 309 01ac 5A000000 		.4byte	0x5a
 310 01b0 00       		.byte	0
 311 01b1 18       		.uleb128 0x18
 312 01b2 66010000 		.4byte	.LASF25
 313 01b6 06       		.byte	0x6
 314 01b7 05       		.byte	0x5
 315 01b8 0D       		.uleb128 0xd
 316 01b9 00000000 		.4byte	.LASF15
 317 01bd 01       		.byte	0x1
 318 01be 29       		.byte	0x29
 319 01bf 73000000 		.4byte	0x73
 320 01c3 C9010000 		.4byte	0x1c9
 321 01c7 0E       		.uleb128 0xe
 322 01c8 00       		.byte	0
 323 01c9 19       		.uleb128 0x19
 324 01ca 9A000000 		.4byte	.LASF16
 325 01ce 01       		.byte	0x1
 326 01cf 2A       		.byte	0x2a
 327 01d0 73000000 		.4byte	0x73
 328 01d4 0E       		.uleb128 0xe
 329 01d5 00       		.byte	0
 330 01d6 00       		.byte	0
 331              		.section	.debug_abbrev,"",%progbits
 332              	.Ldebug_abbrev0:
 333 0000 01       		.uleb128 0x1
 334 0001 11       		.uleb128 0x11
 335 0002 01       		.byte	0x1
 336 0003 25       		.uleb128 0x25
 337 0004 0E       		.uleb128 0xe
 338 0005 13       		.uleb128 0x13
 339 0006 0B       		.uleb128 0xb
 340 0007 03       		.uleb128 0x3
 341 0008 0E       		.uleb128 0xe
 342 0009 1B       		.uleb128 0x1b
 343 000a 0E       		.uleb128 0xe
 344 000b 11       		.uleb128 0x11
 345 000c 01       		.uleb128 0x1
 346 000d 12       		.uleb128 0x12
 347 000e 06       		.uleb128 0x6
 348 000f 10       		.uleb128 0x10
 349 0010 17       		.uleb128 0x17
 350 0011 00       		.byte	0
 351 0012 00       		.byte	0
 352 0013 02       		.uleb128 0x2
 353 0014 24       		.uleb128 0x24
 354 0015 00       		.byte	0
 355 0016 0B       		.uleb128 0xb
 356 0017 0B       		.uleb128 0xb
 357 0018 3E       		.uleb128 0x3e
 358 0019 0B       		.uleb128 0xb
 359 001a 03       		.uleb128 0x3
 360 001b 0E       		.uleb128 0xe
 361 001c 00       		.byte	0
 362 001d 00       		.byte	0
 363 001e 03       		.uleb128 0x3
ARM GAS  /tmp/cc8trpVY.s 			page 14


 364 001f 16       		.uleb128 0x16
 365 0020 00       		.byte	0
 366 0021 03       		.uleb128 0x3
 367 0022 0E       		.uleb128 0xe
 368 0023 3A       		.uleb128 0x3a
 369 0024 0B       		.uleb128 0xb
 370 0025 3B       		.uleb128 0x3b
 371 0026 0B       		.uleb128 0xb
 372 0027 49       		.uleb128 0x49
 373 0028 13       		.uleb128 0x13
 374 0029 00       		.byte	0
 375 002a 00       		.byte	0
 376 002b 04       		.uleb128 0x4
 377 002c 24       		.uleb128 0x24
 378 002d 00       		.byte	0
 379 002e 0B       		.uleb128 0xb
 380 002f 0B       		.uleb128 0xb
 381 0030 3E       		.uleb128 0x3e
 382 0031 0B       		.uleb128 0xb
 383 0032 03       		.uleb128 0x3
 384 0033 08       		.uleb128 0x8
 385 0034 00       		.byte	0
 386 0035 00       		.byte	0
 387 0036 05       		.uleb128 0x5
 388 0037 35       		.uleb128 0x35
 389 0038 00       		.byte	0
 390 0039 49       		.uleb128 0x49
 391 003a 13       		.uleb128 0x13
 392 003b 00       		.byte	0
 393 003c 00       		.byte	0
 394 003d 06       		.uleb128 0x6
 395 003e 13       		.uleb128 0x13
 396 003f 01       		.byte	0x1
 397 0040 0B       		.uleb128 0xb
 398 0041 0B       		.uleb128 0xb
 399 0042 3A       		.uleb128 0x3a
 400 0043 0B       		.uleb128 0xb
 401 0044 3B       		.uleb128 0x3b
 402 0045 05       		.uleb128 0x5
 403 0046 01       		.uleb128 0x1
 404 0047 13       		.uleb128 0x13
 405 0048 00       		.byte	0
 406 0049 00       		.byte	0
 407 004a 07       		.uleb128 0x7
 408 004b 0D       		.uleb128 0xd
 409 004c 00       		.byte	0
 410 004d 03       		.uleb128 0x3
 411 004e 08       		.uleb128 0x8
 412 004f 3A       		.uleb128 0x3a
 413 0050 0B       		.uleb128 0xb
 414 0051 3B       		.uleb128 0x3b
 415 0052 05       		.uleb128 0x5
 416 0053 49       		.uleb128 0x49
 417 0054 13       		.uleb128 0x13
 418 0055 38       		.uleb128 0x38
 419 0056 0B       		.uleb128 0xb
 420 0057 00       		.byte	0
ARM GAS  /tmp/cc8trpVY.s 			page 15


 421 0058 00       		.byte	0
 422 0059 08       		.uleb128 0x8
 423 005a 16       		.uleb128 0x16
 424 005b 00       		.byte	0
 425 005c 03       		.uleb128 0x3
 426 005d 0E       		.uleb128 0xe
 427 005e 3A       		.uleb128 0x3a
 428 005f 0B       		.uleb128 0xb
 429 0060 3B       		.uleb128 0x3b
 430 0061 05       		.uleb128 0x5
 431 0062 49       		.uleb128 0x49
 432 0063 13       		.uleb128 0x13
 433 0064 00       		.byte	0
 434 0065 00       		.byte	0
 435 0066 09       		.uleb128 0x9
 436 0067 2E       		.uleb128 0x2e
 437 0068 00       		.byte	0
 438 0069 03       		.uleb128 0x3
 439 006a 0E       		.uleb128 0xe
 440 006b 3A       		.uleb128 0x3a
 441 006c 0B       		.uleb128 0xb
 442 006d 3B       		.uleb128 0x3b
 443 006e 05       		.uleb128 0x5
 444 006f 27       		.uleb128 0x27
 445 0070 19       		.uleb128 0x19
 446 0071 20       		.uleb128 0x20
 447 0072 0B       		.uleb128 0xb
 448 0073 00       		.byte	0
 449 0074 00       		.byte	0
 450 0075 0A       		.uleb128 0xa
 451 0076 2E       		.uleb128 0x2e
 452 0077 00       		.byte	0
 453 0078 03       		.uleb128 0x3
 454 0079 0E       		.uleb128 0xe
 455 007a 3A       		.uleb128 0x3a
 456 007b 0B       		.uleb128 0xb
 457 007c 3B       		.uleb128 0x3b
 458 007d 0B       		.uleb128 0xb
 459 007e 27       		.uleb128 0x27
 460 007f 19       		.uleb128 0x19
 461 0080 20       		.uleb128 0x20
 462 0081 0B       		.uleb128 0xb
 463 0082 00       		.byte	0
 464 0083 00       		.byte	0
 465 0084 0B       		.uleb128 0xb
 466 0085 2E       		.uleb128 0x2e
 467 0086 01       		.byte	0x1
 468 0087 3F       		.uleb128 0x3f
 469 0088 19       		.uleb128 0x19
 470 0089 03       		.uleb128 0x3
 471 008a 0E       		.uleb128 0xe
 472 008b 3A       		.uleb128 0x3a
 473 008c 0B       		.uleb128 0xb
 474 008d 3B       		.uleb128 0x3b
 475 008e 0B       		.uleb128 0xb
 476 008f 11       		.uleb128 0x11
 477 0090 01       		.uleb128 0x1
ARM GAS  /tmp/cc8trpVY.s 			page 16


 478 0091 12       		.uleb128 0x12
 479 0092 06       		.uleb128 0x6
 480 0093 40       		.uleb128 0x40
 481 0094 18       		.uleb128 0x18
 482 0095 9742     		.uleb128 0x2117
 483 0097 19       		.uleb128 0x19
 484 0098 01       		.uleb128 0x1
 485 0099 13       		.uleb128 0x13
 486 009a 00       		.byte	0
 487 009b 00       		.byte	0
 488 009c 0C       		.uleb128 0xc
 489 009d 34       		.uleb128 0x34
 490 009e 00       		.byte	0
 491 009f 03       		.uleb128 0x3
 492 00a0 0E       		.uleb128 0xe
 493 00a1 3A       		.uleb128 0x3a
 494 00a2 0B       		.uleb128 0xb
 495 00a3 3B       		.uleb128 0x3b
 496 00a4 0B       		.uleb128 0xb
 497 00a5 49       		.uleb128 0x49
 498 00a6 13       		.uleb128 0x13
 499 00a7 02       		.uleb128 0x2
 500 00a8 17       		.uleb128 0x17
 501 00a9 00       		.byte	0
 502 00aa 00       		.byte	0
 503 00ab 0D       		.uleb128 0xd
 504 00ac 2E       		.uleb128 0x2e
 505 00ad 01       		.byte	0x1
 506 00ae 3F       		.uleb128 0x3f
 507 00af 19       		.uleb128 0x19
 508 00b0 03       		.uleb128 0x3
 509 00b1 0E       		.uleb128 0xe
 510 00b2 3A       		.uleb128 0x3a
 511 00b3 0B       		.uleb128 0xb
 512 00b4 3B       		.uleb128 0x3b
 513 00b5 0B       		.uleb128 0xb
 514 00b6 49       		.uleb128 0x49
 515 00b7 13       		.uleb128 0x13
 516 00b8 3C       		.uleb128 0x3c
 517 00b9 19       		.uleb128 0x19
 518 00ba 01       		.uleb128 0x1
 519 00bb 13       		.uleb128 0x13
 520 00bc 00       		.byte	0
 521 00bd 00       		.byte	0
 522 00be 0E       		.uleb128 0xe
 523 00bf 18       		.uleb128 0x18
 524 00c0 00       		.byte	0
 525 00c1 00       		.byte	0
 526 00c2 00       		.byte	0
 527 00c3 0F       		.uleb128 0xf
 528 00c4 1D       		.uleb128 0x1d
 529 00c5 00       		.byte	0
 530 00c6 31       		.uleb128 0x31
 531 00c7 13       		.uleb128 0x13
 532 00c8 52       		.uleb128 0x52
 533 00c9 01       		.uleb128 0x1
 534 00ca 55       		.uleb128 0x55
ARM GAS  /tmp/cc8trpVY.s 			page 17


 535 00cb 17       		.uleb128 0x17
 536 00cc 58       		.uleb128 0x58
 537 00cd 0B       		.uleb128 0xb
 538 00ce 59       		.uleb128 0x59
 539 00cf 0B       		.uleb128 0xb
 540 00d0 00       		.byte	0
 541 00d1 00       		.byte	0
 542 00d2 10       		.uleb128 0x10
 543 00d3 1D       		.uleb128 0x1d
 544 00d4 00       		.byte	0
 545 00d5 31       		.uleb128 0x31
 546 00d6 13       		.uleb128 0x13
 547 00d7 11       		.uleb128 0x11
 548 00d8 01       		.uleb128 0x1
 549 00d9 12       		.uleb128 0x12
 550 00da 06       		.uleb128 0x6
 551 00db 58       		.uleb128 0x58
 552 00dc 0B       		.uleb128 0xb
 553 00dd 59       		.uleb128 0x59
 554 00de 0B       		.uleb128 0xb
 555 00df 00       		.byte	0
 556 00e0 00       		.byte	0
 557 00e1 11       		.uleb128 0x11
 558 00e2 898201   		.uleb128 0x4109
 559 00e5 01       		.byte	0x1
 560 00e6 11       		.uleb128 0x11
 561 00e7 01       		.uleb128 0x1
 562 00e8 31       		.uleb128 0x31
 563 00e9 13       		.uleb128 0x13
 564 00ea 01       		.uleb128 0x1
 565 00eb 13       		.uleb128 0x13
 566 00ec 00       		.byte	0
 567 00ed 00       		.byte	0
 568 00ee 12       		.uleb128 0x12
 569 00ef 8A8201   		.uleb128 0x410a
 570 00f2 00       		.byte	0
 571 00f3 02       		.uleb128 0x2
 572 00f4 18       		.uleb128 0x18
 573 00f5 9142     		.uleb128 0x2111
 574 00f7 18       		.uleb128 0x18
 575 00f8 00       		.byte	0
 576 00f9 00       		.byte	0
 577 00fa 13       		.uleb128 0x13
 578 00fb 898201   		.uleb128 0x4109
 579 00fe 00       		.byte	0
 580 00ff 11       		.uleb128 0x11
 581 0100 01       		.uleb128 0x1
 582 0101 31       		.uleb128 0x31
 583 0102 13       		.uleb128 0x13
 584 0103 00       		.byte	0
 585 0104 00       		.byte	0
 586 0105 14       		.uleb128 0x14
 587 0106 0F       		.uleb128 0xf
 588 0107 00       		.byte	0
 589 0108 0B       		.uleb128 0xb
 590 0109 0B       		.uleb128 0xb
 591 010a 49       		.uleb128 0x49
ARM GAS  /tmp/cc8trpVY.s 			page 18


 592 010b 13       		.uleb128 0x13
 593 010c 00       		.byte	0
 594 010d 00       		.byte	0
 595 010e 15       		.uleb128 0x15
 596 010f 34       		.uleb128 0x34
 597 0110 00       		.byte	0
 598 0111 03       		.uleb128 0x3
 599 0112 0E       		.uleb128 0xe
 600 0113 3A       		.uleb128 0x3a
 601 0114 0B       		.uleb128 0xb
 602 0115 3B       		.uleb128 0x3b
 603 0116 0B       		.uleb128 0xb
 604 0117 49       		.uleb128 0x49
 605 0118 13       		.uleb128 0x13
 606 0119 3F       		.uleb128 0x3f
 607 011a 19       		.uleb128 0x19
 608 011b 3C       		.uleb128 0x3c
 609 011c 19       		.uleb128 0x19
 610 011d 00       		.byte	0
 611 011e 00       		.byte	0
 612 011f 16       		.uleb128 0x16
 613 0120 2E       		.uleb128 0x2e
 614 0121 01       		.byte	0x1
 615 0122 3F       		.uleb128 0x3f
 616 0123 19       		.uleb128 0x19
 617 0124 03       		.uleb128 0x3
 618 0125 0E       		.uleb128 0xe
 619 0126 3A       		.uleb128 0x3a
 620 0127 0B       		.uleb128 0xb
 621 0128 3B       		.uleb128 0x3b
 622 0129 0B       		.uleb128 0xb
 623 012a 27       		.uleb128 0x27
 624 012b 19       		.uleb128 0x19
 625 012c 3C       		.uleb128 0x3c
 626 012d 19       		.uleb128 0x19
 627 012e 01       		.uleb128 0x1
 628 012f 13       		.uleb128 0x13
 629 0130 00       		.byte	0
 630 0131 00       		.byte	0
 631 0132 17       		.uleb128 0x17
 632 0133 05       		.uleb128 0x5
 633 0134 00       		.byte	0
 634 0135 49       		.uleb128 0x49
 635 0136 13       		.uleb128 0x13
 636 0137 00       		.byte	0
 637 0138 00       		.byte	0
 638 0139 18       		.uleb128 0x18
 639 013a 2E       		.uleb128 0x2e
 640 013b 00       		.byte	0
 641 013c 3F       		.uleb128 0x3f
 642 013d 19       		.uleb128 0x19
 643 013e 03       		.uleb128 0x3
 644 013f 0E       		.uleb128 0xe
 645 0140 3A       		.uleb128 0x3a
 646 0141 0B       		.uleb128 0xb
 647 0142 3B       		.uleb128 0x3b
 648 0143 0B       		.uleb128 0xb
ARM GAS  /tmp/cc8trpVY.s 			page 19


 649 0144 27       		.uleb128 0x27
 650 0145 19       		.uleb128 0x19
 651 0146 3C       		.uleb128 0x3c
 652 0147 19       		.uleb128 0x19
 653 0148 00       		.byte	0
 654 0149 00       		.byte	0
 655 014a 19       		.uleb128 0x19
 656 014b 2E       		.uleb128 0x2e
 657 014c 01       		.byte	0x1
 658 014d 3F       		.uleb128 0x3f
 659 014e 19       		.uleb128 0x19
 660 014f 03       		.uleb128 0x3
 661 0150 0E       		.uleb128 0xe
 662 0151 3A       		.uleb128 0x3a
 663 0152 0B       		.uleb128 0xb
 664 0153 3B       		.uleb128 0x3b
 665 0154 0B       		.uleb128 0xb
 666 0155 49       		.uleb128 0x49
 667 0156 13       		.uleb128 0x13
 668 0157 3C       		.uleb128 0x3c
 669 0158 19       		.uleb128 0x19
 670 0159 00       		.byte	0
 671 015a 00       		.byte	0
 672 015b 00       		.byte	0
 673              		.section	.debug_loc,"",%progbits
 674              	.Ldebug_loc0:
 675              	.LLST0:
 676 0000 04000000 		.4byte	.LVL1-.Ltext0
 677 0004 12000000 		.4byte	.LVL3-.Ltext0
 678 0008 0100     		.2byte	0x1
 679 000a 53       		.byte	0x53
 680 000b 00000000 		.4byte	0
 681 000f 00000000 		.4byte	0
 682              		.section	.debug_aranges,"",%progbits
 683 0000 1C000000 		.4byte	0x1c
 684 0004 0200     		.2byte	0x2
 685 0006 00000000 		.4byte	.Ldebug_info0
 686 000a 04       		.byte	0x4
 687 000b 00       		.byte	0
 688 000c 0000     		.2byte	0
 689 000e 0000     		.2byte	0
 690 0010 00000000 		.4byte	.Ltext0
 691 0014 40000000 		.4byte	.Letext0-.Ltext0
 692 0018 00000000 		.4byte	0
 693 001c 00000000 		.4byte	0
 694              		.section	.debug_ranges,"",%progbits
 695              	.Ldebug_ranges0:
 696 0000 10000000 		.4byte	.LBB8-.Ltext0
 697 0004 12000000 		.4byte	.LBE8-.Ltext0
 698 0008 14000000 		.4byte	.LBB11-.Ltext0
 699 000c 1A000000 		.4byte	.LBE11-.Ltext0
 700 0010 00000000 		.4byte	0
 701 0014 00000000 		.4byte	0
 702              		.section	.debug_line,"",%progbits
 703              	.Ldebug_line0:
 704 0000 D4000000 		.section	.debug_str,"MS",%progbits,1
 704      02009500 
ARM GAS  /tmp/cc8trpVY.s 			page 20


 704      00000201 
 704      FB0E0D00 
 704      01010101 
 705              	.LASF15:
 706 0000 73657475 		.ascii	"setup\000"
 706      7000
 707              	.LASF14:
 708 0006 73657475 		.ascii	"setup_ICS\000"
 708      705F4943 
 708      5300
 709              	.LASF6:
 710 0010 75696E74 		.ascii	"uint8_t\000"
 710      385F7400 
 711              	.LASF21:
 712 0018 7372632F 		.ascii	"src/startup.c\000"
 712      73746172 
 712      7475702E 
 712      6300
 713              	.LASF24:
 714 0026 64657374 		.ascii	"dest\000"
 714      00
 715              	.LASF18:
 716 002b 5F656E64 		.ascii	"_end_bss\000"
 716      5F627373 
 716      00
 717              	.LASF4:
 718 0034 756E7369 		.ascii	"unsigned char\000"
 718      676E6564 
 718      20636861 
 718      7200
 719              	.LASF8:
 720 0042 6C6F6E67 		.ascii	"long unsigned int\000"
 720      20756E73 
 720      69676E65 
 720      6420696E 
 720      7400
 721              	.LASF5:
 722 0054 73686F72 		.ascii	"short unsigned int\000"
 722      7420756E 
 722      7369676E 
 722      65642069 
 722      6E7400
 723              	.LASF22:
 724 0067 2F686F6D 		.ascii	"/home/xxx/projects/armmke_dev1/firmware\000"
 724      652F7878 
 724      782F7072 
 724      6F6A6563 
 724      74732F61 
 725              	.LASF17:
 726 008f 5F737461 		.ascii	"_start_bss\000"
 726      72745F62 
 726      737300
 727              	.LASF16:
 728 009a 6D61696E 		.ascii	"main\000"
 728      00
 729              	.LASF19:
 730 009f 73657475 		.ascii	"setup_PIT\000"
ARM GAS  /tmp/cc8trpVY.s 			page 21


 730      705F5049 
 730      5400
 731              	.LASF13:
 732 00a9 5F5F656E 		.ascii	"__enable_irq\000"
 732      61626C65 
 732      5F697271 
 732      00
 733              	.LASF10:
 734 00b6 756E7369 		.ascii	"unsigned int\000"
 734      676E6564 
 734      20696E74 
 734      00
 735              	.LASF9:
 736 00c3 6C6F6E67 		.ascii	"long long unsigned int\000"
 736      206C6F6E 
 736      6720756E 
 736      7369676E 
 736      65642069 
 737              	.LASF20:
 738 00da 474E5520 		.ascii	"GNU C 4.9.3 20150529 (prerelease) -mthumb -mcpu=cor"
 738      4320342E 
 738      392E3320 
 738      32303135 
 738      30353239 
 739 010d 7465782D 		.ascii	"tex-m0plus -g -Os -fno-common -ffreestanding -fno-b"
 739      6D30706C 
 739      7573202D 
 739      67202D4F 
 739      73202D66 
 740 0140 75696C74 		.ascii	"uiltin\000"
 740      696E00
 741              	.LASF11:
 742 0147 73697A65 		.ascii	"sizetype\000"
 742      74797065 
 742      00
 743              	.LASF23:
 744 0150 73746172 		.ascii	"startup\000"
 744      74757000 
 745              	.LASF3:
 746 0158 6C6F6E67 		.ascii	"long long int\000"
 746      206C6F6E 
 746      6720696E 
 746      7400
 747              	.LASF25:
 748 0166 73657475 		.ascii	"setup_ADC\000"
 748      705F4144 
 748      4300
 749              	.LASF1:
 750 0170 73686F72 		.ascii	"short int\000"
 750      7420696E 
 750      7400
 751              	.LASF12:
 752 017a 4943535F 		.ascii	"ICS_Type\000"
 752      54797065 
 752      00
 753              	.LASF7:
 754 0183 75696E74 		.ascii	"uint32_t\000"
ARM GAS  /tmp/cc8trpVY.s 			page 22


 754      33325F74 
 754      00
 755              	.LASF2:
 756 018c 6C6F6E67 		.ascii	"long int\000"
 756      20696E74 
 756      00
 757              	.LASF0:
 758 0195 7369676E 		.ascii	"signed char\000"
 758      65642063 
 758      68617200 
 759              		.ident	"GCC: (15:4.9.3+svn231177-1) 4.9.3 20150529 (prerelease)"
ARM GAS  /tmp/cc8trpVY.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 startup.c
     /tmp/cc8trpVY.s:17     .text:0000000000000000 $t
     /tmp/cc8trpVY.s:22     .text:0000000000000000 startup
     /tmp/cc8trpVY.s:93     .text:0000000000000030 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
setup_PIT
setup_ADC
setup
main
_start_bss
_end_bss
