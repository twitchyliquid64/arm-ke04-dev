ARM GAS  /tmp/ccstIQZD.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"startup.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.align	1
  18              		.global	startup
  19              		.code	16
  20              		.thumb_func
  21              		.type	startup, %function
  22              	startup:
  23              	.LFB34:
  24              		.file 1 "src/startup.c"
   1:src/startup.c **** /**
   2:src/startup.c ****  * KE04 Loading Firmware
   3:src/startup.c ****  * Mid-level startup code
   4:src/startup.c ****  *
   5:src/startup.c ****  * originally by Kevin Cuzner
   6:src/startup.c ****  * modified by meh
   7:src/startup.c ****  */
   8:src/startup.c **** 
   9:src/startup.c ****  #include "MKE04Z4.h"
  10:src/startup.c ****  #include "pit.h"
  11:src/startup.c ****  #include "adc.h"
  12:src/startup.c ****  #include "pwm.h"
  13:src/startup.c **** #include <stdint.h>
  14:src/startup.c **** 
  15:src/startup.c **** /**
  16:src/startup.c ****  * Sets up the ICS module to FEI at approximately 48MHz with the peripheral
  17:src/startup.c ****  * clock at 24MHz
  18:src/startup.c ****  */
  19:src/startup.c **** static void setup_ICS(void)
  20:src/startup.c **** {
  21:src/startup.c ****     //we assume this is run soon after setup
  22:src/startup.c ****     ICS->C2 = 0x00; //bdiv=0
  23:src/startup.c ****     ICS->C1 = 0x04; //internal reference clock to FLL
  24:src/startup.c **** }
  25:src/startup.c **** 
  26:src/startup.c **** 
  27:src/startup.c **** 
  28:src/startup.c **** extern uint32_t _start_bss, _end_bss;
  29:src/startup.c **** 
  30:src/startup.c **** void startup()
  31:src/startup.c **** {
  25              		.loc 1 31 0
  26              		.cfi_startproc
ARM GAS  /tmp/ccstIQZD.s 			page 2


  27              	.LVL0:
  28 0000 08B5     		push	{r3, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 3, -8
  31              		.cfi_offset 14, -4
  32:src/startup.c ****     /* Zero the BSS */
  33:src/startup.c ****     uint32_t *dest;
  34:src/startup.c ****     for (dest = &_start_bss; dest < &_end_bss; dest++)
  32              		.loc 1 34 0
  33 0002 0D4B     		ldr	r3, .L6
  34              	.LVL1:
  35              	.L2:
  36              		.loc 1 34 0 is_stmt 0 discriminator 1
  37 0004 0D49     		ldr	r1, .L6+4
  38 0006 0022     		mov	r2, #0
  39 0008 8B42     		cmp	r3, r1
  40 000a 01D2     		bcs	.L5
  35:src/startup.c ****         *dest = 0;
  41              		.loc 1 35 0 is_stmt 1 discriminator 3
  42 000c 04C3     		stmia	r3!, {r2}
  43              	.LVL2:
  44 000e F9E7     		b	.L2
  45              	.L5:
  46              	.LBB8:
  47              	.LBB9:
  22:src/startup.c ****     ICS->C1 = 0x04; //internal reference clock to FLL
  48              		.loc 1 22 0
  49 0010 0B4B     		ldr	r3, .L6+8
  50              	.LVL3:
  51              	.LBE9:
  52              	.LBE8:
  36:src/startup.c **** 
  37:src/startup.c ****     setup_ICS(); //set up the clock to our known 48MHz frequency
  38:src/startup.c ****     setup_PIT(PIT_2kHz);
  53              		.loc 1 38 0
  54 0012 0C48     		ldr	r0, .L6+12
  55              	.LBB11:
  56              	.LBB10:
  22:src/startup.c ****     ICS->C1 = 0x04; //internal reference clock to FLL
  57              		.loc 1 22 0
  58 0014 5A70     		strb	r2, [r3, #1]
  23:src/startup.c **** }
  59              		.loc 1 23 0
  60 0016 0432     		add	r2, r2, #4
  61 0018 1A70     		strb	r2, [r3]
  62              	.LBE10:
  63              	.LBE11:
  64              		.loc 1 38 0
  65 001a FFF7FEFF 		bl	setup_PIT
  66              	.LVL4:
  39:src/startup.c ****     setup_ADC();
  67              		.loc 1 39 0
  68 001e FFF7FEFF 		bl	setup_ADC
  69              	.LVL5:
  40:src/startup.c ****     setup_PWM();
  70              		.loc 1 40 0
  71 0022 FFF7FEFF 		bl	setup_PWM
ARM GAS  /tmp/ccstIQZD.s 			page 3


  72              	.LVL6:
  41:src/startup.c ****     setup_UART();
  73              		.loc 1 41 0
  74 0026 FFF7FEFF 		bl	setup_UART
  75              	.LVL7:
  76              	.LBB12:
  77              	.LBB13:
  78              		.file 2 "include/core_cmFunc.h"
   1:include/core_cmFunc.h **** /**************************************************************************//**
   2:include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:include/core_cmFunc.h ****  * @version  V3.20
   5:include/core_cmFunc.h ****  * @date     25. February 2013
   6:include/core_cmFunc.h ****  *
   7:include/core_cmFunc.h ****  * @note
   8:include/core_cmFunc.h ****  *
   9:include/core_cmFunc.h ****  ******************************************************************************/
  10:include/core_cmFunc.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:include/core_cmFunc.h **** 
  12:include/core_cmFunc.h ****    All rights reserved.
  13:include/core_cmFunc.h ****    Redistribution and use in source and binary forms, with or without
  14:include/core_cmFunc.h ****    modification, are permitted provided that the following conditions are met:
  15:include/core_cmFunc.h ****    - Redistributions of source code must retain the above copyright
  16:include/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer.
  17:include/core_cmFunc.h ****    - Redistributions in binary form must reproduce the above copyright
  18:include/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer in the
  19:include/core_cmFunc.h ****      documentation and/or other materials provided with the distribution.
  20:include/core_cmFunc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:include/core_cmFunc.h ****      to endorse or promote products derived from this software without
  22:include/core_cmFunc.h ****      specific prior written permission.
  23:include/core_cmFunc.h ****    *
  24:include/core_cmFunc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:include/core_cmFunc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:include/core_cmFunc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:include/core_cmFunc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:include/core_cmFunc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:include/core_cmFunc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:include/core_cmFunc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:include/core_cmFunc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:include/core_cmFunc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:include/core_cmFunc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:include/core_cmFunc.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:include/core_cmFunc.h ****    ---------------------------------------------------------------------------*/
  36:include/core_cmFunc.h **** 
  37:include/core_cmFunc.h **** 
  38:include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  39:include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  40:include/core_cmFunc.h **** 
  41:include/core_cmFunc.h **** 
  42:include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  43:include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  44:include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  45:include/core_cmFunc.h ****   @{
  46:include/core_cmFunc.h ****  */
  47:include/core_cmFunc.h **** 
  48:include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:include/core_cmFunc.h **** /* ARM armcc specific functions */
ARM GAS  /tmp/ccstIQZD.s 			page 4


  50:include/core_cmFunc.h **** 
  51:include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  52:include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:include/core_cmFunc.h **** #endif
  54:include/core_cmFunc.h **** 
  55:include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  56:include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  57:include/core_cmFunc.h **** 
  58:include/core_cmFunc.h **** /** \brief  Get Control Register
  59:include/core_cmFunc.h **** 
  60:include/core_cmFunc.h ****     This function returns the content of the Control Register.
  61:include/core_cmFunc.h **** 
  62:include/core_cmFunc.h ****     \return               Control Register value
  63:include/core_cmFunc.h ****  */
  64:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  65:include/core_cmFunc.h **** {
  66:include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  67:include/core_cmFunc.h ****   return(__regControl);
  68:include/core_cmFunc.h **** }
  69:include/core_cmFunc.h **** 
  70:include/core_cmFunc.h **** 
  71:include/core_cmFunc.h **** /** \brief  Set Control Register
  72:include/core_cmFunc.h **** 
  73:include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  74:include/core_cmFunc.h **** 
  75:include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  76:include/core_cmFunc.h ****  */
  77:include/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  78:include/core_cmFunc.h **** {
  79:include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  80:include/core_cmFunc.h ****   __regControl = control;
  81:include/core_cmFunc.h **** }
  82:include/core_cmFunc.h **** 
  83:include/core_cmFunc.h **** 
  84:include/core_cmFunc.h **** /** \brief  Get IPSR Register
  85:include/core_cmFunc.h **** 
  86:include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  87:include/core_cmFunc.h **** 
  88:include/core_cmFunc.h ****     \return               IPSR Register value
  89:include/core_cmFunc.h ****  */
  90:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  91:include/core_cmFunc.h **** {
  92:include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  93:include/core_cmFunc.h ****   return(__regIPSR);
  94:include/core_cmFunc.h **** }
  95:include/core_cmFunc.h **** 
  96:include/core_cmFunc.h **** 
  97:include/core_cmFunc.h **** /** \brief  Get APSR Register
  98:include/core_cmFunc.h **** 
  99:include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 100:include/core_cmFunc.h **** 
 101:include/core_cmFunc.h ****     \return               APSR Register value
 102:include/core_cmFunc.h ****  */
 103:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
 104:include/core_cmFunc.h **** {
 105:include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
 106:include/core_cmFunc.h ****   return(__regAPSR);
ARM GAS  /tmp/ccstIQZD.s 			page 5


 107:include/core_cmFunc.h **** }
 108:include/core_cmFunc.h **** 
 109:include/core_cmFunc.h **** 
 110:include/core_cmFunc.h **** /** \brief  Get xPSR Register
 111:include/core_cmFunc.h **** 
 112:include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 113:include/core_cmFunc.h **** 
 114:include/core_cmFunc.h ****     \return               xPSR Register value
 115:include/core_cmFunc.h ****  */
 116:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 117:include/core_cmFunc.h **** {
 118:include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 119:include/core_cmFunc.h ****   return(__regXPSR);
 120:include/core_cmFunc.h **** }
 121:include/core_cmFunc.h **** 
 122:include/core_cmFunc.h **** 
 123:include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 124:include/core_cmFunc.h **** 
 125:include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 126:include/core_cmFunc.h **** 
 127:include/core_cmFunc.h ****     \return               PSP Register value
 128:include/core_cmFunc.h ****  */
 129:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 130:include/core_cmFunc.h **** {
 131:include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 132:include/core_cmFunc.h ****   return(__regProcessStackPointer);
 133:include/core_cmFunc.h **** }
 134:include/core_cmFunc.h **** 
 135:include/core_cmFunc.h **** 
 136:include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 137:include/core_cmFunc.h **** 
 138:include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 139:include/core_cmFunc.h **** 
 140:include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 141:include/core_cmFunc.h ****  */
 142:include/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 143:include/core_cmFunc.h **** {
 144:include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 145:include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 146:include/core_cmFunc.h **** }
 147:include/core_cmFunc.h **** 
 148:include/core_cmFunc.h **** 
 149:include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 150:include/core_cmFunc.h **** 
 151:include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 152:include/core_cmFunc.h **** 
 153:include/core_cmFunc.h ****     \return               MSP Register value
 154:include/core_cmFunc.h ****  */
 155:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 156:include/core_cmFunc.h **** {
 157:include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 158:include/core_cmFunc.h ****   return(__regMainStackPointer);
 159:include/core_cmFunc.h **** }
 160:include/core_cmFunc.h **** 
 161:include/core_cmFunc.h **** 
 162:include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 163:include/core_cmFunc.h **** 
ARM GAS  /tmp/ccstIQZD.s 			page 6


 164:include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 165:include/core_cmFunc.h **** 
 166:include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 167:include/core_cmFunc.h ****  */
 168:include/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 169:include/core_cmFunc.h **** {
 170:include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 171:include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 172:include/core_cmFunc.h **** }
 173:include/core_cmFunc.h **** 
 174:include/core_cmFunc.h **** 
 175:include/core_cmFunc.h **** /** \brief  Get Priority Mask
 176:include/core_cmFunc.h **** 
 177:include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 178:include/core_cmFunc.h **** 
 179:include/core_cmFunc.h ****     \return               Priority Mask value
 180:include/core_cmFunc.h ****  */
 181:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 182:include/core_cmFunc.h **** {
 183:include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 184:include/core_cmFunc.h ****   return(__regPriMask);
 185:include/core_cmFunc.h **** }
 186:include/core_cmFunc.h **** 
 187:include/core_cmFunc.h **** 
 188:include/core_cmFunc.h **** /** \brief  Set Priority Mask
 189:include/core_cmFunc.h **** 
 190:include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 191:include/core_cmFunc.h **** 
 192:include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 193:include/core_cmFunc.h ****  */
 194:include/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 195:include/core_cmFunc.h **** {
 196:include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 197:include/core_cmFunc.h ****   __regPriMask = (priMask);
 198:include/core_cmFunc.h **** }
 199:include/core_cmFunc.h **** 
 200:include/core_cmFunc.h **** 
 201:include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 202:include/core_cmFunc.h **** 
 203:include/core_cmFunc.h **** /** \brief  Enable FIQ
 204:include/core_cmFunc.h **** 
 205:include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 206:include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 207:include/core_cmFunc.h ****  */
 208:include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 209:include/core_cmFunc.h **** 
 210:include/core_cmFunc.h **** 
 211:include/core_cmFunc.h **** /** \brief  Disable FIQ
 212:include/core_cmFunc.h **** 
 213:include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 214:include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 215:include/core_cmFunc.h ****  */
 216:include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 217:include/core_cmFunc.h **** 
 218:include/core_cmFunc.h **** 
 219:include/core_cmFunc.h **** /** \brief  Get Base Priority
 220:include/core_cmFunc.h **** 
ARM GAS  /tmp/ccstIQZD.s 			page 7


 221:include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 222:include/core_cmFunc.h **** 
 223:include/core_cmFunc.h ****     \return               Base Priority register value
 224:include/core_cmFunc.h ****  */
 225:include/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 226:include/core_cmFunc.h **** {
 227:include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 228:include/core_cmFunc.h ****   return(__regBasePri);
 229:include/core_cmFunc.h **** }
 230:include/core_cmFunc.h **** 
 231:include/core_cmFunc.h **** 
 232:include/core_cmFunc.h **** /** \brief  Set Base Priority
 233:include/core_cmFunc.h **** 
 234:include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 235:include/core_cmFunc.h **** 
 236:include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 237:include/core_cmFunc.h ****  */
 238:include/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 239:include/core_cmFunc.h **** {
 240:include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 241:include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 242:include/core_cmFunc.h **** }
 243:include/core_cmFunc.h **** 
 244:include/core_cmFunc.h **** 
 245:include/core_cmFunc.h **** /** \brief  Get Fault Mask
 246:include/core_cmFunc.h **** 
 247:include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 248:include/core_cmFunc.h **** 
 249:include/core_cmFunc.h ****     \return               Fault Mask register value
 250:include/core_cmFunc.h ****  */
 251:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 252:include/core_cmFunc.h **** {
 253:include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 254:include/core_cmFunc.h ****   return(__regFaultMask);
 255:include/core_cmFunc.h **** }
 256:include/core_cmFunc.h **** 
 257:include/core_cmFunc.h **** 
 258:include/core_cmFunc.h **** /** \brief  Set Fault Mask
 259:include/core_cmFunc.h **** 
 260:include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 261:include/core_cmFunc.h **** 
 262:include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 263:include/core_cmFunc.h ****  */
 264:include/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 265:include/core_cmFunc.h **** {
 266:include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 267:include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 268:include/core_cmFunc.h **** }
 269:include/core_cmFunc.h **** 
 270:include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 271:include/core_cmFunc.h **** 
 272:include/core_cmFunc.h **** 
 273:include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 274:include/core_cmFunc.h **** 
 275:include/core_cmFunc.h **** /** \brief  Get FPSCR
 276:include/core_cmFunc.h **** 
 277:include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
ARM GAS  /tmp/ccstIQZD.s 			page 8


 278:include/core_cmFunc.h **** 
 279:include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 280:include/core_cmFunc.h ****  */
 281:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 282:include/core_cmFunc.h **** {
 283:include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 284:include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 285:include/core_cmFunc.h ****   return(__regfpscr);
 286:include/core_cmFunc.h **** #else
 287:include/core_cmFunc.h ****    return(0);
 288:include/core_cmFunc.h **** #endif
 289:include/core_cmFunc.h **** }
 290:include/core_cmFunc.h **** 
 291:include/core_cmFunc.h **** 
 292:include/core_cmFunc.h **** /** \brief  Set FPSCR
 293:include/core_cmFunc.h **** 
 294:include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 295:include/core_cmFunc.h **** 
 296:include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 297:include/core_cmFunc.h ****  */
 298:include/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 299:include/core_cmFunc.h **** {
 300:include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 301:include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 302:include/core_cmFunc.h ****   __regfpscr = (fpscr);
 303:include/core_cmFunc.h **** #endif
 304:include/core_cmFunc.h **** }
 305:include/core_cmFunc.h **** 
 306:include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 307:include/core_cmFunc.h **** 
 308:include/core_cmFunc.h **** 
 309:include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 310:include/core_cmFunc.h **** /* IAR iccarm specific functions */
 311:include/core_cmFunc.h **** 
 312:include/core_cmFunc.h **** #include <cmsis_iar.h>
 313:include/core_cmFunc.h **** 
 314:include/core_cmFunc.h **** 
 315:include/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 316:include/core_cmFunc.h **** /* TI CCS specific functions */
 317:include/core_cmFunc.h **** 
 318:include/core_cmFunc.h **** #include <cmsis_ccs.h>
 319:include/core_cmFunc.h **** 
 320:include/core_cmFunc.h **** 
 321:include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 322:include/core_cmFunc.h **** /* GNU gcc specific functions */
 323:include/core_cmFunc.h **** 
 324:include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 325:include/core_cmFunc.h **** 
 326:include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 327:include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 328:include/core_cmFunc.h ****  */
 329:include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 330:include/core_cmFunc.h **** {
 331:include/core_cmFunc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  79              		.loc 2 331 0
  80              	@ 331 "include/core_cmFunc.h" 1
  81 002a 62B6     		cpsie i
ARM GAS  /tmp/ccstIQZD.s 			page 9


  82              	@ 0 "" 2
  83              		.code	16
  84              	.LBE13:
  85              	.LBE12:
  42:src/startup.c ****     __enable_irq();
  43:src/startup.c **** 
  44:src/startup.c ****     setup();
  86              		.loc 1 44 0
  87 002c FFF7FEFF 		bl	setup
  88              	.LVL8:
  45:src/startup.c ****     main();
  46:src/startup.c **** }
  89              		.loc 1 46 0
  90              		@ sp needed
  45:src/startup.c ****     main();
  91              		.loc 1 45 0
  92 0030 FFF7FEFF 		bl	main
  93              	.LVL9:
  94              		.loc 1 46 0
  95 0034 08BD     		pop	{r3, pc}
  96              	.L7:
  97 0036 C046     		.align	2
  98              	.L6:
  99 0038 00000000 		.word	_start_bss
 100 003c 00000000 		.word	_end_bss
 101 0040 00400640 		.word	1074151424
 102 0044 C05D0000 		.word	24000
 103              		.cfi_endproc
 104              	.LFE34:
 105              		.size	startup, .-startup
 106              	.Letext0:
 107              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stdint-gcc.h"
 108              		.file 4 "include/MKE04Z4.h"
 109              		.file 5 "include/pit.h"
 110              		.file 6 "include/adc.h"
 111              		.file 7 "include/pwm.h"
 112              		.section	.debug_info,"",%progbits
 113              	.Ldebug_info0:
 114 0000 0E020000 		.4byte	0x20e
 115 0004 0400     		.2byte	0x4
 116 0006 00000000 		.4byte	.Ldebug_abbrev0
 117 000a 04       		.byte	0x4
 118 000b 01       		.uleb128 0x1
 119 000c EF000000 		.4byte	.LASF23
 120 0010 01       		.byte	0x1
 121 0011 2D000000 		.4byte	.LASF24
 122 0015 7C000000 		.4byte	.LASF25
 123 0019 00000000 		.4byte	.Ltext0
 124 001d 48000000 		.4byte	.Letext0-.Ltext0
 125 0021 00000000 		.4byte	.Ldebug_line0
 126 0025 02       		.uleb128 0x2
 127 0026 01       		.byte	0x1
 128 0027 06       		.byte	0x6
 129 0028 AA010000 		.4byte	.LASF0
 130 002c 02       		.uleb128 0x2
 131 002d 02       		.byte	0x2
 132 002e 05       		.byte	0x5
ARM GAS  /tmp/ccstIQZD.s 			page 10


 133 002f 85010000 		.4byte	.LASF1
 134 0033 02       		.uleb128 0x2
 135 0034 04       		.byte	0x4
 136 0035 05       		.byte	0x5
 137 0036 A1010000 		.4byte	.LASF2
 138 003a 02       		.uleb128 0x2
 139 003b 08       		.byte	0x8
 140 003c 05       		.byte	0x5
 141 003d 6D010000 		.4byte	.LASF3
 142 0041 03       		.uleb128 0x3
 143 0042 25000000 		.4byte	.LASF6
 144 0046 03       		.byte	0x3
 145 0047 2E       		.byte	0x2e
 146 0048 4C000000 		.4byte	0x4c
 147 004c 02       		.uleb128 0x2
 148 004d 01       		.byte	0x1
 149 004e 08       		.byte	0x8
 150 004f 49000000 		.4byte	.LASF4
 151 0053 02       		.uleb128 0x2
 152 0054 02       		.byte	0x2
 153 0055 07       		.byte	0x7
 154 0056 69000000 		.4byte	.LASF5
 155 005a 03       		.uleb128 0x3
 156 005b 98010000 		.4byte	.LASF7
 157 005f 03       		.byte	0x3
 158 0060 34       		.byte	0x34
 159 0061 65000000 		.4byte	0x65
 160 0065 02       		.uleb128 0x2
 161 0066 04       		.byte	0x4
 162 0067 07       		.byte	0x7
 163 0068 57000000 		.4byte	.LASF8
 164 006c 02       		.uleb128 0x2
 165 006d 08       		.byte	0x8
 166 006e 07       		.byte	0x7
 167 006f D8000000 		.4byte	.LASF9
 168 0073 04       		.uleb128 0x4
 169 0074 04       		.byte	0x4
 170 0075 05       		.byte	0x5
 171 0076 696E7400 		.ascii	"int\000"
 172 007a 02       		.uleb128 0x2
 173 007b 04       		.byte	0x4
 174 007c 07       		.byte	0x7
 175 007d CB000000 		.4byte	.LASF10
 176 0081 02       		.uleb128 0x2
 177 0082 04       		.byte	0x4
 178 0083 07       		.byte	0x7
 179 0084 5C010000 		.4byte	.LASF11
 180 0088 05       		.uleb128 0x5
 181 0089 41000000 		.4byte	0x41
 182 008d 06       		.uleb128 0x6
 183 008e 05       		.byte	0x5
 184 008f 04       		.byte	0x4
 185 0090 7705     		.2byte	0x577
 186 0092 D2000000 		.4byte	0xd2
 187 0096 07       		.uleb128 0x7
 188 0097 433100   		.ascii	"C1\000"
 189 009a 04       		.byte	0x4
ARM GAS  /tmp/ccstIQZD.s 			page 11


 190 009b 7805     		.2byte	0x578
 191 009d 88000000 		.4byte	0x88
 192 00a1 00       		.byte	0
 193 00a2 07       		.uleb128 0x7
 194 00a3 433200   		.ascii	"C2\000"
 195 00a6 04       		.byte	0x4
 196 00a7 7905     		.2byte	0x579
 197 00a9 88000000 		.4byte	0x88
 198 00ad 01       		.byte	0x1
 199 00ae 07       		.uleb128 0x7
 200 00af 433300   		.ascii	"C3\000"
 201 00b2 04       		.byte	0x4
 202 00b3 7A05     		.2byte	0x57a
 203 00b5 88000000 		.4byte	0x88
 204 00b9 02       		.byte	0x2
 205 00ba 07       		.uleb128 0x7
 206 00bb 433400   		.ascii	"C4\000"
 207 00be 04       		.byte	0x4
 208 00bf 7B05     		.2byte	0x57b
 209 00c1 88000000 		.4byte	0x88
 210 00c5 03       		.byte	0x3
 211 00c6 07       		.uleb128 0x7
 212 00c7 5300     		.ascii	"S\000"
 213 00c9 04       		.byte	0x4
 214 00ca 7C05     		.2byte	0x57c
 215 00cc 88000000 		.4byte	0x88
 216 00d0 04       		.byte	0x4
 217 00d1 00       		.byte	0
 218 00d2 08       		.uleb128 0x8
 219 00d3 8F010000 		.4byte	.LASF12
 220 00d7 04       		.byte	0x4
 221 00d8 7D05     		.2byte	0x57d
 222 00da 8D000000 		.4byte	0x8d
 223 00de 09       		.uleb128 0x9
 224 00df BE000000 		.4byte	.LASF13
 225 00e3 02       		.byte	0x2
 226 00e4 4901     		.2byte	0x149
 227 00e6 03       		.byte	0x3
 228 00e7 0A       		.uleb128 0xa
 229 00e8 1B000000 		.4byte	.LASF14
 230 00ec 01       		.byte	0x1
 231 00ed 13       		.byte	0x13
 232 00ee 01       		.byte	0x1
 233 00ef 0B       		.uleb128 0xb
 234 00f0 65010000 		.4byte	.LASF26
 235 00f4 01       		.byte	0x1
 236 00f5 1E       		.byte	0x1e
 237 00f6 00000000 		.4byte	.LFB34
 238 00fa 48000000 		.4byte	.LFE34-.LFB34
 239 00fe 01       		.uleb128 0x1
 240 00ff 9C       		.byte	0x9c
 241 0100 A7010000 		.4byte	0x1a7
 242 0104 0C       		.uleb128 0xc
 243 0105 3B000000 		.4byte	.LASF27
 244 0109 01       		.byte	0x1
 245 010a 21       		.byte	0x21
 246 010b A7010000 		.4byte	0x1a7
ARM GAS  /tmp/ccstIQZD.s 			page 12


 247 010f 00000000 		.4byte	.LLST0
 248 0113 0D       		.uleb128 0xd
 249 0114 00000000 		.4byte	.LASF15
 250 0118 01       		.byte	0x1
 251 0119 29       		.byte	0x29
 252 011a 73000000 		.4byte	0x73
 253 011e 24010000 		.4byte	0x124
 254 0122 0E       		.uleb128 0xe
 255 0123 00       		.byte	0
 256 0124 0D       		.uleb128 0xd
 257 0125 15000000 		.4byte	.LASF16
 258 0129 01       		.byte	0x1
 259 012a 2C       		.byte	0x2c
 260 012b 73000000 		.4byte	0x73
 261 012f 35010000 		.4byte	0x135
 262 0133 0E       		.uleb128 0xe
 263 0134 00       		.byte	0
 264 0135 0D       		.uleb128 0xd
 265 0136 AF000000 		.4byte	.LASF17
 266 013a 01       		.byte	0x1
 267 013b 2D       		.byte	0x2d
 268 013c 73000000 		.4byte	0x73
 269 0140 46010000 		.4byte	0x146
 270 0144 0E       		.uleb128 0xe
 271 0145 00       		.byte	0
 272 0146 0F       		.uleb128 0xf
 273 0147 E7000000 		.4byte	0xe7
 274 014b 10000000 		.4byte	.LBB8
 275 014f 00000000 		.4byte	.Ldebug_ranges0+0
 276 0153 01       		.byte	0x1
 277 0154 25       		.byte	0x25
 278 0155 10       		.uleb128 0x10
 279 0156 DE000000 		.4byte	0xde
 280 015a 2A000000 		.4byte	.LBB12
 281 015e 02000000 		.4byte	.LBE12-.LBB12
 282 0162 01       		.byte	0x1
 283 0163 2A       		.byte	0x2a
 284 0164 11       		.uleb128 0x11
 285 0165 1E000000 		.4byte	.LVL4
 286 0169 C3010000 		.4byte	0x1c3
 287 016d 79010000 		.4byte	0x179
 288 0171 12       		.uleb128 0x12
 289 0172 01       		.uleb128 0x1
 290 0173 50       		.byte	0x50
 291 0174 03       		.uleb128 0x3
 292 0175 0A       		.byte	0xa
 293 0176 C05D     		.2byte	0x5dc0
 294 0178 00       		.byte	0
 295 0179 13       		.uleb128 0x13
 296 017a 22000000 		.4byte	.LVL5
 297 017e D4010000 		.4byte	0x1d4
 298 0182 13       		.uleb128 0x13
 299 0183 26000000 		.4byte	.LVL6
 300 0187 DB010000 		.4byte	0x1db
 301 018b 13       		.uleb128 0x13
 302 018c 2A000000 		.4byte	.LVL7
 303 0190 E2010000 		.4byte	0x1e2
ARM GAS  /tmp/ccstIQZD.s 			page 13


 304 0194 13       		.uleb128 0x13
 305 0195 30000000 		.4byte	.LVL8
 306 0199 F3010000 		.4byte	0x1f3
 307 019d 13       		.uleb128 0x13
 308 019e 34000000 		.4byte	.LVL9
 309 01a2 04020000 		.4byte	0x204
 310 01a6 00       		.byte	0
 311 01a7 14       		.uleb128 0x14
 312 01a8 04       		.byte	0x4
 313 01a9 5A000000 		.4byte	0x5a
 314 01ad 15       		.uleb128 0x15
 315 01ae A4000000 		.4byte	.LASF18
 316 01b2 01       		.byte	0x1
 317 01b3 1C       		.byte	0x1c
 318 01b4 5A000000 		.4byte	0x5a
 319 01b8 15       		.uleb128 0x15
 320 01b9 40000000 		.4byte	.LASF19
 321 01bd 01       		.byte	0x1
 322 01be 1C       		.byte	0x1c
 323 01bf 5A000000 		.4byte	0x5a
 324 01c3 16       		.uleb128 0x16
 325 01c4 B4000000 		.4byte	.LASF20
 326 01c8 05       		.byte	0x5
 327 01c9 05       		.byte	0x5
 328 01ca D4010000 		.4byte	0x1d4
 329 01ce 17       		.uleb128 0x17
 330 01cf 5A000000 		.4byte	0x5a
 331 01d3 00       		.byte	0
 332 01d4 18       		.uleb128 0x18
 333 01d5 7B010000 		.4byte	.LASF21
 334 01d9 06       		.byte	0x6
 335 01da 05       		.byte	0x5
 336 01db 18       		.uleb128 0x18
 337 01dc 0B000000 		.4byte	.LASF22
 338 01e0 07       		.byte	0x7
 339 01e1 05       		.byte	0x5
 340 01e2 0D       		.uleb128 0xd
 341 01e3 00000000 		.4byte	.LASF15
 342 01e7 01       		.byte	0x1
 343 01e8 29       		.byte	0x29
 344 01e9 73000000 		.4byte	0x73
 345 01ed F3010000 		.4byte	0x1f3
 346 01f1 0E       		.uleb128 0xe
 347 01f2 00       		.byte	0
 348 01f3 0D       		.uleb128 0xd
 349 01f4 15000000 		.4byte	.LASF16
 350 01f8 01       		.byte	0x1
 351 01f9 2C       		.byte	0x2c
 352 01fa 73000000 		.4byte	0x73
 353 01fe 04020000 		.4byte	0x204
 354 0202 0E       		.uleb128 0xe
 355 0203 00       		.byte	0
 356 0204 19       		.uleb128 0x19
 357 0205 AF000000 		.4byte	.LASF17
 358 0209 01       		.byte	0x1
 359 020a 2D       		.byte	0x2d
 360 020b 73000000 		.4byte	0x73
ARM GAS  /tmp/ccstIQZD.s 			page 14


 361 020f 0E       		.uleb128 0xe
 362 0210 00       		.byte	0
 363 0211 00       		.byte	0
 364              		.section	.debug_abbrev,"",%progbits
 365              	.Ldebug_abbrev0:
 366 0000 01       		.uleb128 0x1
 367 0001 11       		.uleb128 0x11
 368 0002 01       		.byte	0x1
 369 0003 25       		.uleb128 0x25
 370 0004 0E       		.uleb128 0xe
 371 0005 13       		.uleb128 0x13
 372 0006 0B       		.uleb128 0xb
 373 0007 03       		.uleb128 0x3
 374 0008 0E       		.uleb128 0xe
 375 0009 1B       		.uleb128 0x1b
 376 000a 0E       		.uleb128 0xe
 377 000b 11       		.uleb128 0x11
 378 000c 01       		.uleb128 0x1
 379 000d 12       		.uleb128 0x12
 380 000e 06       		.uleb128 0x6
 381 000f 10       		.uleb128 0x10
 382 0010 17       		.uleb128 0x17
 383 0011 00       		.byte	0
 384 0012 00       		.byte	0
 385 0013 02       		.uleb128 0x2
 386 0014 24       		.uleb128 0x24
 387 0015 00       		.byte	0
 388 0016 0B       		.uleb128 0xb
 389 0017 0B       		.uleb128 0xb
 390 0018 3E       		.uleb128 0x3e
 391 0019 0B       		.uleb128 0xb
 392 001a 03       		.uleb128 0x3
 393 001b 0E       		.uleb128 0xe
 394 001c 00       		.byte	0
 395 001d 00       		.byte	0
 396 001e 03       		.uleb128 0x3
 397 001f 16       		.uleb128 0x16
 398 0020 00       		.byte	0
 399 0021 03       		.uleb128 0x3
 400 0022 0E       		.uleb128 0xe
 401 0023 3A       		.uleb128 0x3a
 402 0024 0B       		.uleb128 0xb
 403 0025 3B       		.uleb128 0x3b
 404 0026 0B       		.uleb128 0xb
 405 0027 49       		.uleb128 0x49
 406 0028 13       		.uleb128 0x13
 407 0029 00       		.byte	0
 408 002a 00       		.byte	0
 409 002b 04       		.uleb128 0x4
 410 002c 24       		.uleb128 0x24
 411 002d 00       		.byte	0
 412 002e 0B       		.uleb128 0xb
 413 002f 0B       		.uleb128 0xb
 414 0030 3E       		.uleb128 0x3e
 415 0031 0B       		.uleb128 0xb
 416 0032 03       		.uleb128 0x3
 417 0033 08       		.uleb128 0x8
ARM GAS  /tmp/ccstIQZD.s 			page 15


 418 0034 00       		.byte	0
 419 0035 00       		.byte	0
 420 0036 05       		.uleb128 0x5
 421 0037 35       		.uleb128 0x35
 422 0038 00       		.byte	0
 423 0039 49       		.uleb128 0x49
 424 003a 13       		.uleb128 0x13
 425 003b 00       		.byte	0
 426 003c 00       		.byte	0
 427 003d 06       		.uleb128 0x6
 428 003e 13       		.uleb128 0x13
 429 003f 01       		.byte	0x1
 430 0040 0B       		.uleb128 0xb
 431 0041 0B       		.uleb128 0xb
 432 0042 3A       		.uleb128 0x3a
 433 0043 0B       		.uleb128 0xb
 434 0044 3B       		.uleb128 0x3b
 435 0045 05       		.uleb128 0x5
 436 0046 01       		.uleb128 0x1
 437 0047 13       		.uleb128 0x13
 438 0048 00       		.byte	0
 439 0049 00       		.byte	0
 440 004a 07       		.uleb128 0x7
 441 004b 0D       		.uleb128 0xd
 442 004c 00       		.byte	0
 443 004d 03       		.uleb128 0x3
 444 004e 08       		.uleb128 0x8
 445 004f 3A       		.uleb128 0x3a
 446 0050 0B       		.uleb128 0xb
 447 0051 3B       		.uleb128 0x3b
 448 0052 05       		.uleb128 0x5
 449 0053 49       		.uleb128 0x49
 450 0054 13       		.uleb128 0x13
 451 0055 38       		.uleb128 0x38
 452 0056 0B       		.uleb128 0xb
 453 0057 00       		.byte	0
 454 0058 00       		.byte	0
 455 0059 08       		.uleb128 0x8
 456 005a 16       		.uleb128 0x16
 457 005b 00       		.byte	0
 458 005c 03       		.uleb128 0x3
 459 005d 0E       		.uleb128 0xe
 460 005e 3A       		.uleb128 0x3a
 461 005f 0B       		.uleb128 0xb
 462 0060 3B       		.uleb128 0x3b
 463 0061 05       		.uleb128 0x5
 464 0062 49       		.uleb128 0x49
 465 0063 13       		.uleb128 0x13
 466 0064 00       		.byte	0
 467 0065 00       		.byte	0
 468 0066 09       		.uleb128 0x9
 469 0067 2E       		.uleb128 0x2e
 470 0068 00       		.byte	0
 471 0069 03       		.uleb128 0x3
 472 006a 0E       		.uleb128 0xe
 473 006b 3A       		.uleb128 0x3a
 474 006c 0B       		.uleb128 0xb
ARM GAS  /tmp/ccstIQZD.s 			page 16


 475 006d 3B       		.uleb128 0x3b
 476 006e 05       		.uleb128 0x5
 477 006f 27       		.uleb128 0x27
 478 0070 19       		.uleb128 0x19
 479 0071 20       		.uleb128 0x20
 480 0072 0B       		.uleb128 0xb
 481 0073 00       		.byte	0
 482 0074 00       		.byte	0
 483 0075 0A       		.uleb128 0xa
 484 0076 2E       		.uleb128 0x2e
 485 0077 00       		.byte	0
 486 0078 03       		.uleb128 0x3
 487 0079 0E       		.uleb128 0xe
 488 007a 3A       		.uleb128 0x3a
 489 007b 0B       		.uleb128 0xb
 490 007c 3B       		.uleb128 0x3b
 491 007d 0B       		.uleb128 0xb
 492 007e 27       		.uleb128 0x27
 493 007f 19       		.uleb128 0x19
 494 0080 20       		.uleb128 0x20
 495 0081 0B       		.uleb128 0xb
 496 0082 00       		.byte	0
 497 0083 00       		.byte	0
 498 0084 0B       		.uleb128 0xb
 499 0085 2E       		.uleb128 0x2e
 500 0086 01       		.byte	0x1
 501 0087 3F       		.uleb128 0x3f
 502 0088 19       		.uleb128 0x19
 503 0089 03       		.uleb128 0x3
 504 008a 0E       		.uleb128 0xe
 505 008b 3A       		.uleb128 0x3a
 506 008c 0B       		.uleb128 0xb
 507 008d 3B       		.uleb128 0x3b
 508 008e 0B       		.uleb128 0xb
 509 008f 11       		.uleb128 0x11
 510 0090 01       		.uleb128 0x1
 511 0091 12       		.uleb128 0x12
 512 0092 06       		.uleb128 0x6
 513 0093 40       		.uleb128 0x40
 514 0094 18       		.uleb128 0x18
 515 0095 9742     		.uleb128 0x2117
 516 0097 19       		.uleb128 0x19
 517 0098 01       		.uleb128 0x1
 518 0099 13       		.uleb128 0x13
 519 009a 00       		.byte	0
 520 009b 00       		.byte	0
 521 009c 0C       		.uleb128 0xc
 522 009d 34       		.uleb128 0x34
 523 009e 00       		.byte	0
 524 009f 03       		.uleb128 0x3
 525 00a0 0E       		.uleb128 0xe
 526 00a1 3A       		.uleb128 0x3a
 527 00a2 0B       		.uleb128 0xb
 528 00a3 3B       		.uleb128 0x3b
 529 00a4 0B       		.uleb128 0xb
 530 00a5 49       		.uleb128 0x49
 531 00a6 13       		.uleb128 0x13
ARM GAS  /tmp/ccstIQZD.s 			page 17


 532 00a7 02       		.uleb128 0x2
 533 00a8 17       		.uleb128 0x17
 534 00a9 00       		.byte	0
 535 00aa 00       		.byte	0
 536 00ab 0D       		.uleb128 0xd
 537 00ac 2E       		.uleb128 0x2e
 538 00ad 01       		.byte	0x1
 539 00ae 3F       		.uleb128 0x3f
 540 00af 19       		.uleb128 0x19
 541 00b0 03       		.uleb128 0x3
 542 00b1 0E       		.uleb128 0xe
 543 00b2 3A       		.uleb128 0x3a
 544 00b3 0B       		.uleb128 0xb
 545 00b4 3B       		.uleb128 0x3b
 546 00b5 0B       		.uleb128 0xb
 547 00b6 49       		.uleb128 0x49
 548 00b7 13       		.uleb128 0x13
 549 00b8 3C       		.uleb128 0x3c
 550 00b9 19       		.uleb128 0x19
 551 00ba 01       		.uleb128 0x1
 552 00bb 13       		.uleb128 0x13
 553 00bc 00       		.byte	0
 554 00bd 00       		.byte	0
 555 00be 0E       		.uleb128 0xe
 556 00bf 18       		.uleb128 0x18
 557 00c0 00       		.byte	0
 558 00c1 00       		.byte	0
 559 00c2 00       		.byte	0
 560 00c3 0F       		.uleb128 0xf
 561 00c4 1D       		.uleb128 0x1d
 562 00c5 00       		.byte	0
 563 00c6 31       		.uleb128 0x31
 564 00c7 13       		.uleb128 0x13
 565 00c8 52       		.uleb128 0x52
 566 00c9 01       		.uleb128 0x1
 567 00ca 55       		.uleb128 0x55
 568 00cb 17       		.uleb128 0x17
 569 00cc 58       		.uleb128 0x58
 570 00cd 0B       		.uleb128 0xb
 571 00ce 59       		.uleb128 0x59
 572 00cf 0B       		.uleb128 0xb
 573 00d0 00       		.byte	0
 574 00d1 00       		.byte	0
 575 00d2 10       		.uleb128 0x10
 576 00d3 1D       		.uleb128 0x1d
 577 00d4 00       		.byte	0
 578 00d5 31       		.uleb128 0x31
 579 00d6 13       		.uleb128 0x13
 580 00d7 11       		.uleb128 0x11
 581 00d8 01       		.uleb128 0x1
 582 00d9 12       		.uleb128 0x12
 583 00da 06       		.uleb128 0x6
 584 00db 58       		.uleb128 0x58
 585 00dc 0B       		.uleb128 0xb
 586 00dd 59       		.uleb128 0x59
 587 00de 0B       		.uleb128 0xb
 588 00df 00       		.byte	0
ARM GAS  /tmp/ccstIQZD.s 			page 18


 589 00e0 00       		.byte	0
 590 00e1 11       		.uleb128 0x11
 591 00e2 898201   		.uleb128 0x4109
 592 00e5 01       		.byte	0x1
 593 00e6 11       		.uleb128 0x11
 594 00e7 01       		.uleb128 0x1
 595 00e8 31       		.uleb128 0x31
 596 00e9 13       		.uleb128 0x13
 597 00ea 01       		.uleb128 0x1
 598 00eb 13       		.uleb128 0x13
 599 00ec 00       		.byte	0
 600 00ed 00       		.byte	0
 601 00ee 12       		.uleb128 0x12
 602 00ef 8A8201   		.uleb128 0x410a
 603 00f2 00       		.byte	0
 604 00f3 02       		.uleb128 0x2
 605 00f4 18       		.uleb128 0x18
 606 00f5 9142     		.uleb128 0x2111
 607 00f7 18       		.uleb128 0x18
 608 00f8 00       		.byte	0
 609 00f9 00       		.byte	0
 610 00fa 13       		.uleb128 0x13
 611 00fb 898201   		.uleb128 0x4109
 612 00fe 00       		.byte	0
 613 00ff 11       		.uleb128 0x11
 614 0100 01       		.uleb128 0x1
 615 0101 31       		.uleb128 0x31
 616 0102 13       		.uleb128 0x13
 617 0103 00       		.byte	0
 618 0104 00       		.byte	0
 619 0105 14       		.uleb128 0x14
 620 0106 0F       		.uleb128 0xf
 621 0107 00       		.byte	0
 622 0108 0B       		.uleb128 0xb
 623 0109 0B       		.uleb128 0xb
 624 010a 49       		.uleb128 0x49
 625 010b 13       		.uleb128 0x13
 626 010c 00       		.byte	0
 627 010d 00       		.byte	0
 628 010e 15       		.uleb128 0x15
 629 010f 34       		.uleb128 0x34
 630 0110 00       		.byte	0
 631 0111 03       		.uleb128 0x3
 632 0112 0E       		.uleb128 0xe
 633 0113 3A       		.uleb128 0x3a
 634 0114 0B       		.uleb128 0xb
 635 0115 3B       		.uleb128 0x3b
 636 0116 0B       		.uleb128 0xb
 637 0117 49       		.uleb128 0x49
 638 0118 13       		.uleb128 0x13
 639 0119 3F       		.uleb128 0x3f
 640 011a 19       		.uleb128 0x19
 641 011b 3C       		.uleb128 0x3c
 642 011c 19       		.uleb128 0x19
 643 011d 00       		.byte	0
 644 011e 00       		.byte	0
 645 011f 16       		.uleb128 0x16
ARM GAS  /tmp/ccstIQZD.s 			page 19


 646 0120 2E       		.uleb128 0x2e
 647 0121 01       		.byte	0x1
 648 0122 3F       		.uleb128 0x3f
 649 0123 19       		.uleb128 0x19
 650 0124 03       		.uleb128 0x3
 651 0125 0E       		.uleb128 0xe
 652 0126 3A       		.uleb128 0x3a
 653 0127 0B       		.uleb128 0xb
 654 0128 3B       		.uleb128 0x3b
 655 0129 0B       		.uleb128 0xb
 656 012a 27       		.uleb128 0x27
 657 012b 19       		.uleb128 0x19
 658 012c 3C       		.uleb128 0x3c
 659 012d 19       		.uleb128 0x19
 660 012e 01       		.uleb128 0x1
 661 012f 13       		.uleb128 0x13
 662 0130 00       		.byte	0
 663 0131 00       		.byte	0
 664 0132 17       		.uleb128 0x17
 665 0133 05       		.uleb128 0x5
 666 0134 00       		.byte	0
 667 0135 49       		.uleb128 0x49
 668 0136 13       		.uleb128 0x13
 669 0137 00       		.byte	0
 670 0138 00       		.byte	0
 671 0139 18       		.uleb128 0x18
 672 013a 2E       		.uleb128 0x2e
 673 013b 00       		.byte	0
 674 013c 3F       		.uleb128 0x3f
 675 013d 19       		.uleb128 0x19
 676 013e 03       		.uleb128 0x3
 677 013f 0E       		.uleb128 0xe
 678 0140 3A       		.uleb128 0x3a
 679 0141 0B       		.uleb128 0xb
 680 0142 3B       		.uleb128 0x3b
 681 0143 0B       		.uleb128 0xb
 682 0144 27       		.uleb128 0x27
 683 0145 19       		.uleb128 0x19
 684 0146 3C       		.uleb128 0x3c
 685 0147 19       		.uleb128 0x19
 686 0148 00       		.byte	0
 687 0149 00       		.byte	0
 688 014a 19       		.uleb128 0x19
 689 014b 2E       		.uleb128 0x2e
 690 014c 01       		.byte	0x1
 691 014d 3F       		.uleb128 0x3f
 692 014e 19       		.uleb128 0x19
 693 014f 03       		.uleb128 0x3
 694 0150 0E       		.uleb128 0xe
 695 0151 3A       		.uleb128 0x3a
 696 0152 0B       		.uleb128 0xb
 697 0153 3B       		.uleb128 0x3b
 698 0154 0B       		.uleb128 0xb
 699 0155 49       		.uleb128 0x49
 700 0156 13       		.uleb128 0x13
 701 0157 3C       		.uleb128 0x3c
 702 0158 19       		.uleb128 0x19
ARM GAS  /tmp/ccstIQZD.s 			page 20


 703 0159 00       		.byte	0
 704 015a 00       		.byte	0
 705 015b 00       		.byte	0
 706              		.section	.debug_loc,"",%progbits
 707              	.Ldebug_loc0:
 708              	.LLST0:
 709 0000 04000000 		.4byte	.LVL1-.Ltext0
 710 0004 12000000 		.4byte	.LVL3-.Ltext0
 711 0008 0100     		.2byte	0x1
 712 000a 53       		.byte	0x53
 713 000b 00000000 		.4byte	0
 714 000f 00000000 		.4byte	0
 715              		.section	.debug_aranges,"",%progbits
 716 0000 1C000000 		.4byte	0x1c
 717 0004 0200     		.2byte	0x2
 718 0006 00000000 		.4byte	.Ldebug_info0
 719 000a 04       		.byte	0x4
 720 000b 00       		.byte	0
 721 000c 0000     		.2byte	0
 722 000e 0000     		.2byte	0
 723 0010 00000000 		.4byte	.Ltext0
 724 0014 48000000 		.4byte	.Letext0-.Ltext0
 725 0018 00000000 		.4byte	0
 726 001c 00000000 		.4byte	0
 727              		.section	.debug_ranges,"",%progbits
 728              	.Ldebug_ranges0:
 729 0000 10000000 		.4byte	.LBB8-.Ltext0
 730 0004 12000000 		.4byte	.LBE8-.Ltext0
 731 0008 14000000 		.4byte	.LBB11-.Ltext0
 732 000c 1A000000 		.4byte	.LBE11-.Ltext0
 733 0010 00000000 		.4byte	0
 734 0014 00000000 		.4byte	0
 735              		.section	.debug_line,"",%progbits
 736              	.Ldebug_line0:
 737 0000 DF000000 		.section	.debug_str,"MS",%progbits,1
 737      02009E00 
 737      00000201 
 737      FB0E0D00 
 737      01010101 
 738              	.LASF15:
 739 0000 73657475 		.ascii	"setup_UART\000"
 739      705F5541 
 739      525400
 740              	.LASF22:
 741 000b 73657475 		.ascii	"setup_PWM\000"
 741      705F5057 
 741      4D00
 742              	.LASF16:
 743 0015 73657475 		.ascii	"setup\000"
 743      7000
 744              	.LASF14:
 745 001b 73657475 		.ascii	"setup_ICS\000"
 745      705F4943 
 745      5300
 746              	.LASF6:
 747 0025 75696E74 		.ascii	"uint8_t\000"
 747      385F7400 
ARM GAS  /tmp/ccstIQZD.s 			page 21


 748              	.LASF24:
 749 002d 7372632F 		.ascii	"src/startup.c\000"
 749      73746172 
 749      7475702E 
 749      6300
 750              	.LASF27:
 751 003b 64657374 		.ascii	"dest\000"
 751      00
 752              	.LASF19:
 753 0040 5F656E64 		.ascii	"_end_bss\000"
 753      5F627373 
 753      00
 754              	.LASF4:
 755 0049 756E7369 		.ascii	"unsigned char\000"
 755      676E6564 
 755      20636861 
 755      7200
 756              	.LASF8:
 757 0057 6C6F6E67 		.ascii	"long unsigned int\000"
 757      20756E73 
 757      69676E65 
 757      6420696E 
 757      7400
 758              	.LASF5:
 759 0069 73686F72 		.ascii	"short unsigned int\000"
 759      7420756E 
 759      7369676E 
 759      65642069 
 759      6E7400
 760              	.LASF25:
 761 007c 2F686F6D 		.ascii	"/home/xxx/projects/armmke_dev1/firmware\000"
 761      652F7878 
 761      782F7072 
 761      6F6A6563 
 761      74732F61 
 762              	.LASF18:
 763 00a4 5F737461 		.ascii	"_start_bss\000"
 763      72745F62 
 763      737300
 764              	.LASF17:
 765 00af 6D61696E 		.ascii	"main\000"
 765      00
 766              	.LASF20:
 767 00b4 73657475 		.ascii	"setup_PIT\000"
 767      705F5049 
 767      5400
 768              	.LASF13:
 769 00be 5F5F656E 		.ascii	"__enable_irq\000"
 769      61626C65 
 769      5F697271 
 769      00
 770              	.LASF10:
 771 00cb 756E7369 		.ascii	"unsigned int\000"
 771      676E6564 
 771      20696E74 
 771      00
 772              	.LASF9:
ARM GAS  /tmp/ccstIQZD.s 			page 22


 773 00d8 6C6F6E67 		.ascii	"long long unsigned int\000"
 773      206C6F6E 
 773      6720756E 
 773      7369676E 
 773      65642069 
 774              	.LASF23:
 775 00ef 474E5520 		.ascii	"GNU C 4.9.3 20150529 (prerelease) -mthumb -mcpu=cor"
 775      4320342E 
 775      392E3320 
 775      32303135 
 775      30353239 
 776 0122 7465782D 		.ascii	"tex-m0plus -g -Os -fno-common -ffreestanding -fno-b"
 776      6D30706C 
 776      7573202D 
 776      67202D4F 
 776      73202D66 
 777 0155 75696C74 		.ascii	"uiltin\000"
 777      696E00
 778              	.LASF11:
 779 015c 73697A65 		.ascii	"sizetype\000"
 779      74797065 
 779      00
 780              	.LASF26:
 781 0165 73746172 		.ascii	"startup\000"
 781      74757000 
 782              	.LASF3:
 783 016d 6C6F6E67 		.ascii	"long long int\000"
 783      206C6F6E 
 783      6720696E 
 783      7400
 784              	.LASF21:
 785 017b 73657475 		.ascii	"setup_ADC\000"
 785      705F4144 
 785      4300
 786              	.LASF1:
 787 0185 73686F72 		.ascii	"short int\000"
 787      7420696E 
 787      7400
 788              	.LASF12:
 789 018f 4943535F 		.ascii	"ICS_Type\000"
 789      54797065 
 789      00
 790              	.LASF7:
 791 0198 75696E74 		.ascii	"uint32_t\000"
 791      33325F74 
 791      00
 792              	.LASF2:
 793 01a1 6C6F6E67 		.ascii	"long int\000"
 793      20696E74 
 793      00
 794              	.LASF0:
 795 01aa 7369676E 		.ascii	"signed char\000"
 795      65642063 
 795      68617200 
 796              		.ident	"GCC: (15:4.9.3+svn231177-1) 4.9.3 20150529 (prerelease)"
ARM GAS  /tmp/ccstIQZD.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 startup.c
     /tmp/ccstIQZD.s:17     .text:0000000000000000 $t
     /tmp/ccstIQZD.s:22     .text:0000000000000000 startup
     /tmp/ccstIQZD.s:99     .text:0000000000000038 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
setup_PIT
setup_ADC
setup_PWM
setup_UART
setup
main
_start_bss
_end_bss
