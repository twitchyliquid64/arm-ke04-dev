ARM GAS  /tmp/ccGaHOWR.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.startup,"ax",%progbits
  18              		.align	1
  19              		.global	main
  20              		.code	16
  21              		.thumb_func
  22              		.type	main, %function
  23              	main:
  24              	.LFB33:
  25              		.file 1 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****  * Main
   3:src/main.c    ****  *
   4:src/main.c    ****  * based on work by Kevin Cuzner
   5:src/main.c    ****  * Modified by meh
   6:src/main.c    ****  */
   7:src/main.c    **** 
   8:src/main.c    ****  #include "MKE04Z4.h"
   9:src/main.c    ****  #include "pit.h"
  10:src/main.c    ****  #include <stdint.h>
  11:src/main.c    **** 
  12:src/main.c    **** 
  13:src/main.c    **** 
  14:src/main.c    **** 
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** int main()
  18:src/main.c    **** {
  26              		.loc 1 18 0
  27              		.cfi_startproc
  28 0000 10B5     		push	{r4, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 4, -8
  31              		.cfi_offset 14, -4
  32              	.LBB4:
  33              	.LBB5:
  34              		.file 2 "include/core_cmFunc.h"
   1:include/core_cmFunc.h **** /**************************************************************************//**
   2:include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:include/core_cmFunc.h ****  * @version  V3.20
   5:include/core_cmFunc.h ****  * @date     25. February 2013
ARM GAS  /tmp/ccGaHOWR.s 			page 2


   6:include/core_cmFunc.h ****  *
   7:include/core_cmFunc.h ****  * @note
   8:include/core_cmFunc.h ****  *
   9:include/core_cmFunc.h ****  ******************************************************************************/
  10:include/core_cmFunc.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:include/core_cmFunc.h **** 
  12:include/core_cmFunc.h ****    All rights reserved.
  13:include/core_cmFunc.h ****    Redistribution and use in source and binary forms, with or without
  14:include/core_cmFunc.h ****    modification, are permitted provided that the following conditions are met:
  15:include/core_cmFunc.h ****    - Redistributions of source code must retain the above copyright
  16:include/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer.
  17:include/core_cmFunc.h ****    - Redistributions in binary form must reproduce the above copyright
  18:include/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer in the
  19:include/core_cmFunc.h ****      documentation and/or other materials provided with the distribution.
  20:include/core_cmFunc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:include/core_cmFunc.h ****      to endorse or promote products derived from this software without
  22:include/core_cmFunc.h ****      specific prior written permission.
  23:include/core_cmFunc.h ****    *
  24:include/core_cmFunc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:include/core_cmFunc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:include/core_cmFunc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:include/core_cmFunc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:include/core_cmFunc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:include/core_cmFunc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:include/core_cmFunc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:include/core_cmFunc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:include/core_cmFunc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:include/core_cmFunc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:include/core_cmFunc.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:include/core_cmFunc.h ****    ---------------------------------------------------------------------------*/
  36:include/core_cmFunc.h **** 
  37:include/core_cmFunc.h **** 
  38:include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  39:include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  40:include/core_cmFunc.h **** 
  41:include/core_cmFunc.h **** 
  42:include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  43:include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  44:include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  45:include/core_cmFunc.h ****   @{
  46:include/core_cmFunc.h ****  */
  47:include/core_cmFunc.h **** 
  48:include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:include/core_cmFunc.h **** /* ARM armcc specific functions */
  50:include/core_cmFunc.h **** 
  51:include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  52:include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:include/core_cmFunc.h **** #endif
  54:include/core_cmFunc.h **** 
  55:include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  56:include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  57:include/core_cmFunc.h **** 
  58:include/core_cmFunc.h **** /** \brief  Get Control Register
  59:include/core_cmFunc.h **** 
  60:include/core_cmFunc.h ****     This function returns the content of the Control Register.
  61:include/core_cmFunc.h **** 
  62:include/core_cmFunc.h ****     \return               Control Register value
ARM GAS  /tmp/ccGaHOWR.s 			page 3


  63:include/core_cmFunc.h ****  */
  64:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  65:include/core_cmFunc.h **** {
  66:include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  67:include/core_cmFunc.h ****   return(__regControl);
  68:include/core_cmFunc.h **** }
  69:include/core_cmFunc.h **** 
  70:include/core_cmFunc.h **** 
  71:include/core_cmFunc.h **** /** \brief  Set Control Register
  72:include/core_cmFunc.h **** 
  73:include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  74:include/core_cmFunc.h **** 
  75:include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  76:include/core_cmFunc.h ****  */
  77:include/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  78:include/core_cmFunc.h **** {
  79:include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  80:include/core_cmFunc.h ****   __regControl = control;
  81:include/core_cmFunc.h **** }
  82:include/core_cmFunc.h **** 
  83:include/core_cmFunc.h **** 
  84:include/core_cmFunc.h **** /** \brief  Get IPSR Register
  85:include/core_cmFunc.h **** 
  86:include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  87:include/core_cmFunc.h **** 
  88:include/core_cmFunc.h ****     \return               IPSR Register value
  89:include/core_cmFunc.h ****  */
  90:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  91:include/core_cmFunc.h **** {
  92:include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  93:include/core_cmFunc.h ****   return(__regIPSR);
  94:include/core_cmFunc.h **** }
  95:include/core_cmFunc.h **** 
  96:include/core_cmFunc.h **** 
  97:include/core_cmFunc.h **** /** \brief  Get APSR Register
  98:include/core_cmFunc.h **** 
  99:include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 100:include/core_cmFunc.h **** 
 101:include/core_cmFunc.h ****     \return               APSR Register value
 102:include/core_cmFunc.h ****  */
 103:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
 104:include/core_cmFunc.h **** {
 105:include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
 106:include/core_cmFunc.h ****   return(__regAPSR);
 107:include/core_cmFunc.h **** }
 108:include/core_cmFunc.h **** 
 109:include/core_cmFunc.h **** 
 110:include/core_cmFunc.h **** /** \brief  Get xPSR Register
 111:include/core_cmFunc.h **** 
 112:include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 113:include/core_cmFunc.h **** 
 114:include/core_cmFunc.h ****     \return               xPSR Register value
 115:include/core_cmFunc.h ****  */
 116:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 117:include/core_cmFunc.h **** {
 118:include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 119:include/core_cmFunc.h ****   return(__regXPSR);
ARM GAS  /tmp/ccGaHOWR.s 			page 4


 120:include/core_cmFunc.h **** }
 121:include/core_cmFunc.h **** 
 122:include/core_cmFunc.h **** 
 123:include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 124:include/core_cmFunc.h **** 
 125:include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 126:include/core_cmFunc.h **** 
 127:include/core_cmFunc.h ****     \return               PSP Register value
 128:include/core_cmFunc.h ****  */
 129:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 130:include/core_cmFunc.h **** {
 131:include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 132:include/core_cmFunc.h ****   return(__regProcessStackPointer);
 133:include/core_cmFunc.h **** }
 134:include/core_cmFunc.h **** 
 135:include/core_cmFunc.h **** 
 136:include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 137:include/core_cmFunc.h **** 
 138:include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 139:include/core_cmFunc.h **** 
 140:include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 141:include/core_cmFunc.h ****  */
 142:include/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 143:include/core_cmFunc.h **** {
 144:include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 145:include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 146:include/core_cmFunc.h **** }
 147:include/core_cmFunc.h **** 
 148:include/core_cmFunc.h **** 
 149:include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 150:include/core_cmFunc.h **** 
 151:include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 152:include/core_cmFunc.h **** 
 153:include/core_cmFunc.h ****     \return               MSP Register value
 154:include/core_cmFunc.h ****  */
 155:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 156:include/core_cmFunc.h **** {
 157:include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 158:include/core_cmFunc.h ****   return(__regMainStackPointer);
 159:include/core_cmFunc.h **** }
 160:include/core_cmFunc.h **** 
 161:include/core_cmFunc.h **** 
 162:include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 163:include/core_cmFunc.h **** 
 164:include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 165:include/core_cmFunc.h **** 
 166:include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 167:include/core_cmFunc.h ****  */
 168:include/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 169:include/core_cmFunc.h **** {
 170:include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 171:include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 172:include/core_cmFunc.h **** }
 173:include/core_cmFunc.h **** 
 174:include/core_cmFunc.h **** 
 175:include/core_cmFunc.h **** /** \brief  Get Priority Mask
 176:include/core_cmFunc.h **** 
ARM GAS  /tmp/ccGaHOWR.s 			page 5


 177:include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 178:include/core_cmFunc.h **** 
 179:include/core_cmFunc.h ****     \return               Priority Mask value
 180:include/core_cmFunc.h ****  */
 181:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 182:include/core_cmFunc.h **** {
 183:include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 184:include/core_cmFunc.h ****   return(__regPriMask);
 185:include/core_cmFunc.h **** }
 186:include/core_cmFunc.h **** 
 187:include/core_cmFunc.h **** 
 188:include/core_cmFunc.h **** /** \brief  Set Priority Mask
 189:include/core_cmFunc.h **** 
 190:include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 191:include/core_cmFunc.h **** 
 192:include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 193:include/core_cmFunc.h ****  */
 194:include/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 195:include/core_cmFunc.h **** {
 196:include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 197:include/core_cmFunc.h ****   __regPriMask = (priMask);
 198:include/core_cmFunc.h **** }
 199:include/core_cmFunc.h **** 
 200:include/core_cmFunc.h **** 
 201:include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 202:include/core_cmFunc.h **** 
 203:include/core_cmFunc.h **** /** \brief  Enable FIQ
 204:include/core_cmFunc.h **** 
 205:include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 206:include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 207:include/core_cmFunc.h ****  */
 208:include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 209:include/core_cmFunc.h **** 
 210:include/core_cmFunc.h **** 
 211:include/core_cmFunc.h **** /** \brief  Disable FIQ
 212:include/core_cmFunc.h **** 
 213:include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 214:include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 215:include/core_cmFunc.h ****  */
 216:include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 217:include/core_cmFunc.h **** 
 218:include/core_cmFunc.h **** 
 219:include/core_cmFunc.h **** /** \brief  Get Base Priority
 220:include/core_cmFunc.h **** 
 221:include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 222:include/core_cmFunc.h **** 
 223:include/core_cmFunc.h ****     \return               Base Priority register value
 224:include/core_cmFunc.h ****  */
 225:include/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 226:include/core_cmFunc.h **** {
 227:include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 228:include/core_cmFunc.h ****   return(__regBasePri);
 229:include/core_cmFunc.h **** }
 230:include/core_cmFunc.h **** 
 231:include/core_cmFunc.h **** 
 232:include/core_cmFunc.h **** /** \brief  Set Base Priority
 233:include/core_cmFunc.h **** 
ARM GAS  /tmp/ccGaHOWR.s 			page 6


 234:include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 235:include/core_cmFunc.h **** 
 236:include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 237:include/core_cmFunc.h ****  */
 238:include/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 239:include/core_cmFunc.h **** {
 240:include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 241:include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 242:include/core_cmFunc.h **** }
 243:include/core_cmFunc.h **** 
 244:include/core_cmFunc.h **** 
 245:include/core_cmFunc.h **** /** \brief  Get Fault Mask
 246:include/core_cmFunc.h **** 
 247:include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 248:include/core_cmFunc.h **** 
 249:include/core_cmFunc.h ****     \return               Fault Mask register value
 250:include/core_cmFunc.h ****  */
 251:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 252:include/core_cmFunc.h **** {
 253:include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 254:include/core_cmFunc.h ****   return(__regFaultMask);
 255:include/core_cmFunc.h **** }
 256:include/core_cmFunc.h **** 
 257:include/core_cmFunc.h **** 
 258:include/core_cmFunc.h **** /** \brief  Set Fault Mask
 259:include/core_cmFunc.h **** 
 260:include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 261:include/core_cmFunc.h **** 
 262:include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 263:include/core_cmFunc.h ****  */
 264:include/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 265:include/core_cmFunc.h **** {
 266:include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 267:include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 268:include/core_cmFunc.h **** }
 269:include/core_cmFunc.h **** 
 270:include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 271:include/core_cmFunc.h **** 
 272:include/core_cmFunc.h **** 
 273:include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 274:include/core_cmFunc.h **** 
 275:include/core_cmFunc.h **** /** \brief  Get FPSCR
 276:include/core_cmFunc.h **** 
 277:include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 278:include/core_cmFunc.h **** 
 279:include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 280:include/core_cmFunc.h ****  */
 281:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 282:include/core_cmFunc.h **** {
 283:include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 284:include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 285:include/core_cmFunc.h ****   return(__regfpscr);
 286:include/core_cmFunc.h **** #else
 287:include/core_cmFunc.h ****    return(0);
 288:include/core_cmFunc.h **** #endif
 289:include/core_cmFunc.h **** }
 290:include/core_cmFunc.h **** 
ARM GAS  /tmp/ccGaHOWR.s 			page 7


 291:include/core_cmFunc.h **** 
 292:include/core_cmFunc.h **** /** \brief  Set FPSCR
 293:include/core_cmFunc.h **** 
 294:include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 295:include/core_cmFunc.h **** 
 296:include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 297:include/core_cmFunc.h ****  */
 298:include/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 299:include/core_cmFunc.h **** {
 300:include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 301:include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 302:include/core_cmFunc.h ****   __regfpscr = (fpscr);
 303:include/core_cmFunc.h **** #endif
 304:include/core_cmFunc.h **** }
 305:include/core_cmFunc.h **** 
 306:include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 307:include/core_cmFunc.h **** 
 308:include/core_cmFunc.h **** 
 309:include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 310:include/core_cmFunc.h **** /* IAR iccarm specific functions */
 311:include/core_cmFunc.h **** 
 312:include/core_cmFunc.h **** #include <cmsis_iar.h>
 313:include/core_cmFunc.h **** 
 314:include/core_cmFunc.h **** 
 315:include/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 316:include/core_cmFunc.h **** /* TI CCS specific functions */
 317:include/core_cmFunc.h **** 
 318:include/core_cmFunc.h **** #include <cmsis_ccs.h>
 319:include/core_cmFunc.h **** 
 320:include/core_cmFunc.h **** 
 321:include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 322:include/core_cmFunc.h **** /* GNU gcc specific functions */
 323:include/core_cmFunc.h **** 
 324:include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 325:include/core_cmFunc.h **** 
 326:include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 327:include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 328:include/core_cmFunc.h ****  */
 329:include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 330:include/core_cmFunc.h **** {
 331:include/core_cmFunc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  35              		.loc 2 331 0
  36              	@ 331 "include/core_cmFunc.h" 1
  37 0002 62B6     		cpsie i
  38              	@ 0 "" 2
  39              		.code	16
  40              	.LBE5:
  41              	.LBE4:
  19:src/main.c    ****     __enable_irq();
  20:src/main.c    **** 
  21:src/main.c    ****     GPIOA->PIDR |= 1 << 17;
  42              		.loc 1 21 0
  43 0004 8021     		mov	r1, #128
  44 0006 0B4B     		ldr	r3, .L4
  45 0008 8902     		lsl	r1, r1, #10
  46 000a 1C1C     		mov	r4, r3
  47 000c 9A69     		ldr	r2, [r3, #24]
ARM GAS  /tmp/ccGaHOWR.s 			page 8


  48 000e 0A43     		orr	r2, r1
  49 0010 9A61     		str	r2, [r3, #24]
  22:src/main.c    ****     GPIOA->PDDR |= 1 << 17;
  50              		.loc 1 22 0
  51 0012 5A69     		ldr	r2, [r3, #20]
  52 0014 0A43     		orr	r2, r1
  53 0016 5A61     		str	r2, [r3, #20]
  23:src/main.c    ****     GPIOA->PSOR |= 1 << 17;
  54              		.loc 1 23 0
  55 0018 5A68     		ldr	r2, [r3, #4]
  56 001a 0A43     		orr	r2, r1
  57 001c 5A60     		str	r2, [r3, #4]
  58              	.L2:
  24:src/main.c    **** 
  25:src/main.c    ****     while (1)
  26:src/main.c    ****     {
  27:src/main.c    ****         delayms(1000);
  59              		.loc 1 27 0 discriminator 1
  60 001e FA20     		mov	r0, #250
  61 0020 8000     		lsl	r0, r0, #2
  62 0022 FFF7FEFF 		bl	delayms
  63              	.LVL0:
  28:src/main.c    ****         GPIOA->PTOR |= 1 << 17;
  64              		.loc 1 28 0 discriminator 1
  65 0026 8022     		mov	r2, #128
  66 0028 E368     		ldr	r3, [r4, #12]
  67 002a 9202     		lsl	r2, r2, #10
  68 002c 1343     		orr	r3, r2
  69 002e E360     		str	r3, [r4, #12]
  29:src/main.c    ****     }
  70              		.loc 1 29 0 discriminator 1
  71 0030 F5E7     		b	.L2
  72              	.L5:
  73 0032 C046     		.align	2
  74              	.L4:
  75 0034 00F00F40 		.word	1074786304
  76              		.cfi_endproc
  77              	.LFE33:
  78              		.size	main, .-main
  79              		.text
  80              	.Letext0:
  81              		.file 3 "include/MKE04Z4.h"
  82              		.file 4 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stdint-gcc.h"
  83              		.file 5 "include/pit.h"
  84              		.section	.debug_info,"",%progbits
  85              	.Ldebug_info0:
  86 0000 45010000 		.4byte	0x145
  87 0004 0400     		.2byte	0x4
  88 0006 00000000 		.4byte	.Ldebug_abbrev0
  89 000a 04       		.byte	0x4
  90 000b 01       		.uleb128 0x1
  91 000c 5E000000 		.4byte	.LASF19
  92 0010 01       		.byte	0x1
  93 0011 53000000 		.4byte	.LASF20
  94 0015 55010000 		.4byte	.LASF21
  95 0019 00000000 		.4byte	.Ldebug_ranges0+0
  96 001d 00000000 		.4byte	0
ARM GAS  /tmp/ccGaHOWR.s 			page 9


  97 0021 00000000 		.4byte	.Ldebug_line0
  98 0025 02       		.uleb128 0x2
  99 0026 01       		.byte	0x1
 100 0027 06       		.byte	0x6
 101 0028 12010000 		.4byte	.LASF0
 102 002c 02       		.uleb128 0x2
 103 002d 02       		.byte	0x2
 104 002e 05       		.byte	0x5
 105 002f 35010000 		.4byte	.LASF1
 106 0033 02       		.uleb128 0x2
 107 0034 04       		.byte	0x4
 108 0035 05       		.byte	0x5
 109 0036 E3000000 		.4byte	.LASF2
 110 003a 02       		.uleb128 0x2
 111 003b 08       		.byte	0x8
 112 003c 05       		.byte	0x5
 113 003d 00000000 		.4byte	.LASF3
 114 0041 02       		.uleb128 0x2
 115 0042 01       		.byte	0x1
 116 0043 08       		.byte	0x8
 117 0044 CB000000 		.4byte	.LASF4
 118 0048 02       		.uleb128 0x2
 119 0049 02       		.byte	0x2
 120 004a 07       		.byte	0x7
 121 004b FF000000 		.4byte	.LASF5
 122 004f 03       		.uleb128 0x3
 123 0050 F1000000 		.4byte	.LASF17
 124 0054 04       		.byte	0x4
 125 0055 34       		.byte	0x34
 126 0056 5A000000 		.4byte	0x5a
 127 005a 02       		.uleb128 0x2
 128 005b 04       		.byte	0x4
 129 005c 07       		.byte	0x7
 130 005d 2A000000 		.4byte	.LASF6
 131 0061 02       		.uleb128 0x2
 132 0062 08       		.byte	0x8
 133 0063 07       		.byte	0x7
 134 0064 3C000000 		.4byte	.LASF7
 135 0068 04       		.uleb128 0x4
 136 0069 04       		.byte	0x4
 137 006a 05       		.byte	0x5
 138 006b 696E7400 		.ascii	"int\000"
 139 006f 02       		.uleb128 0x2
 140 0070 04       		.byte	0x4
 141 0071 07       		.byte	0x7
 142 0072 3F010000 		.4byte	.LASF8
 143 0076 02       		.uleb128 0x2
 144 0077 04       		.byte	0x4
 145 0078 07       		.byte	0x7
 146 0079 4C010000 		.4byte	.LASF9
 147 007d 05       		.uleb128 0x5
 148 007e 82000000 		.4byte	0x82
 149 0082 06       		.uleb128 0x6
 150 0083 4F000000 		.4byte	0x4f
 151 0087 07       		.uleb128 0x7
 152 0088 1C       		.byte	0x1c
 153 0089 03       		.byte	0x3
ARM GAS  /tmp/ccGaHOWR.s 			page 10


 154 008a 9804     		.2byte	0x498
 155 008c EC000000 		.4byte	0xec
 156 0090 08       		.uleb128 0x8
 157 0091 FA000000 		.4byte	.LASF10
 158 0095 03       		.byte	0x3
 159 0096 9904     		.2byte	0x499
 160 0098 82000000 		.4byte	0x82
 161 009c 00       		.byte	0
 162 009d 08       		.uleb128 0x8
 163 009e DE000000 		.4byte	.LASF11
 164 00a2 03       		.byte	0x3
 165 00a3 9A04     		.2byte	0x49a
 166 00a5 82000000 		.4byte	0x82
 167 00a9 04       		.byte	0x4
 168 00aa 08       		.uleb128 0x8
 169 00ab 20000000 		.4byte	.LASF12
 170 00af 03       		.byte	0x3
 171 00b0 9B04     		.2byte	0x49b
 172 00b2 82000000 		.4byte	0x82
 173 00b6 08       		.byte	0x8
 174 00b7 08       		.uleb128 0x8
 175 00b8 25000000 		.4byte	.LASF13
 176 00bc 03       		.byte	0x3
 177 00bd 9C04     		.2byte	0x49c
 178 00bf 82000000 		.4byte	0x82
 179 00c3 0C       		.byte	0xc
 180 00c4 08       		.uleb128 0x8
 181 00c5 30010000 		.4byte	.LASF14
 182 00c9 03       		.byte	0x3
 183 00ca 9D04     		.2byte	0x49d
 184 00cc 7D000000 		.4byte	0x7d
 185 00d0 10       		.byte	0x10
 186 00d1 08       		.uleb128 0x8
 187 00d2 EC000000 		.4byte	.LASF15
 188 00d6 03       		.byte	0x3
 189 00d7 9E04     		.2byte	0x49e
 190 00d9 82000000 		.4byte	0x82
 191 00dd 14       		.byte	0x14
 192 00de 08       		.uleb128 0x8
 193 00df 0E000000 		.4byte	.LASF16
 194 00e3 03       		.byte	0x3
 195 00e4 9F04     		.2byte	0x49f
 196 00e6 82000000 		.4byte	0x82
 197 00ea 18       		.byte	0x18
 198 00eb 00       		.byte	0
 199 00ec 09       		.uleb128 0x9
 200 00ed 1E010000 		.4byte	.LASF18
 201 00f1 03       		.byte	0x3
 202 00f2 A004     		.2byte	0x4a0
 203 00f4 87000000 		.4byte	0x87
 204 00f8 0A       		.uleb128 0xa
 205 00f9 13000000 		.4byte	.LASF22
 206 00fd 02       		.byte	0x2
 207 00fe 4901     		.2byte	0x149
 208 0100 03       		.byte	0x3
 209 0101 0B       		.uleb128 0xb
 210 0102 D9000000 		.4byte	.LASF23
ARM GAS  /tmp/ccGaHOWR.s 			page 11


 211 0106 01       		.byte	0x1
 212 0107 11       		.byte	0x11
 213 0108 68000000 		.4byte	0x68
 214 010c 00000000 		.4byte	.LFB33
 215 0110 38000000 		.4byte	.LFE33-.LFB33
 216 0114 01       		.uleb128 0x1
 217 0115 9C       		.byte	0x9c
 218 0116 3B010000 		.4byte	0x13b
 219 011a 0C       		.uleb128 0xc
 220 011b F8000000 		.4byte	0xf8
 221 011f 02000000 		.4byte	.LBB4
 222 0123 02000000 		.4byte	.LBE4-.LBB4
 223 0127 01       		.byte	0x1
 224 0128 13       		.byte	0x13
 225 0129 0D       		.uleb128 0xd
 226 012a 26000000 		.4byte	.LVL0
 227 012e 3B010000 		.4byte	0x13b
 228 0132 0E       		.uleb128 0xe
 229 0133 01       		.uleb128 0x1
 230 0134 50       		.byte	0x50
 231 0135 03       		.uleb128 0x3
 232 0136 0A       		.byte	0xa
 233 0137 E803     		.2byte	0x3e8
 234 0139 00       		.byte	0
 235 013a 00       		.byte	0
 236 013b 0F       		.uleb128 0xf
 237 013c 28010000 		.4byte	.LASF24
 238 0140 05       		.byte	0x5
 239 0141 07       		.byte	0x7
 240 0142 10       		.uleb128 0x10
 241 0143 4F000000 		.4byte	0x4f
 242 0147 00       		.byte	0
 243 0148 00       		.byte	0
 244              		.section	.debug_abbrev,"",%progbits
 245              	.Ldebug_abbrev0:
 246 0000 01       		.uleb128 0x1
 247 0001 11       		.uleb128 0x11
 248 0002 01       		.byte	0x1
 249 0003 25       		.uleb128 0x25
 250 0004 0E       		.uleb128 0xe
 251 0005 13       		.uleb128 0x13
 252 0006 0B       		.uleb128 0xb
 253 0007 03       		.uleb128 0x3
 254 0008 0E       		.uleb128 0xe
 255 0009 1B       		.uleb128 0x1b
 256 000a 0E       		.uleb128 0xe
 257 000b 55       		.uleb128 0x55
 258 000c 17       		.uleb128 0x17
 259 000d 11       		.uleb128 0x11
 260 000e 01       		.uleb128 0x1
 261 000f 10       		.uleb128 0x10
 262 0010 17       		.uleb128 0x17
 263 0011 00       		.byte	0
 264 0012 00       		.byte	0
 265 0013 02       		.uleb128 0x2
 266 0014 24       		.uleb128 0x24
 267 0015 00       		.byte	0
ARM GAS  /tmp/ccGaHOWR.s 			page 12


 268 0016 0B       		.uleb128 0xb
 269 0017 0B       		.uleb128 0xb
 270 0018 3E       		.uleb128 0x3e
 271 0019 0B       		.uleb128 0xb
 272 001a 03       		.uleb128 0x3
 273 001b 0E       		.uleb128 0xe
 274 001c 00       		.byte	0
 275 001d 00       		.byte	0
 276 001e 03       		.uleb128 0x3
 277 001f 16       		.uleb128 0x16
 278 0020 00       		.byte	0
 279 0021 03       		.uleb128 0x3
 280 0022 0E       		.uleb128 0xe
 281 0023 3A       		.uleb128 0x3a
 282 0024 0B       		.uleb128 0xb
 283 0025 3B       		.uleb128 0x3b
 284 0026 0B       		.uleb128 0xb
 285 0027 49       		.uleb128 0x49
 286 0028 13       		.uleb128 0x13
 287 0029 00       		.byte	0
 288 002a 00       		.byte	0
 289 002b 04       		.uleb128 0x4
 290 002c 24       		.uleb128 0x24
 291 002d 00       		.byte	0
 292 002e 0B       		.uleb128 0xb
 293 002f 0B       		.uleb128 0xb
 294 0030 3E       		.uleb128 0x3e
 295 0031 0B       		.uleb128 0xb
 296 0032 03       		.uleb128 0x3
 297 0033 08       		.uleb128 0x8
 298 0034 00       		.byte	0
 299 0035 00       		.byte	0
 300 0036 05       		.uleb128 0x5
 301 0037 26       		.uleb128 0x26
 302 0038 00       		.byte	0
 303 0039 49       		.uleb128 0x49
 304 003a 13       		.uleb128 0x13
 305 003b 00       		.byte	0
 306 003c 00       		.byte	0
 307 003d 06       		.uleb128 0x6
 308 003e 35       		.uleb128 0x35
 309 003f 00       		.byte	0
 310 0040 49       		.uleb128 0x49
 311 0041 13       		.uleb128 0x13
 312 0042 00       		.byte	0
 313 0043 00       		.byte	0
 314 0044 07       		.uleb128 0x7
 315 0045 13       		.uleb128 0x13
 316 0046 01       		.byte	0x1
 317 0047 0B       		.uleb128 0xb
 318 0048 0B       		.uleb128 0xb
 319 0049 3A       		.uleb128 0x3a
 320 004a 0B       		.uleb128 0xb
 321 004b 3B       		.uleb128 0x3b
 322 004c 05       		.uleb128 0x5
 323 004d 01       		.uleb128 0x1
 324 004e 13       		.uleb128 0x13
ARM GAS  /tmp/ccGaHOWR.s 			page 13


 325 004f 00       		.byte	0
 326 0050 00       		.byte	0
 327 0051 08       		.uleb128 0x8
 328 0052 0D       		.uleb128 0xd
 329 0053 00       		.byte	0
 330 0054 03       		.uleb128 0x3
 331 0055 0E       		.uleb128 0xe
 332 0056 3A       		.uleb128 0x3a
 333 0057 0B       		.uleb128 0xb
 334 0058 3B       		.uleb128 0x3b
 335 0059 05       		.uleb128 0x5
 336 005a 49       		.uleb128 0x49
 337 005b 13       		.uleb128 0x13
 338 005c 38       		.uleb128 0x38
 339 005d 0B       		.uleb128 0xb
 340 005e 00       		.byte	0
 341 005f 00       		.byte	0
 342 0060 09       		.uleb128 0x9
 343 0061 16       		.uleb128 0x16
 344 0062 00       		.byte	0
 345 0063 03       		.uleb128 0x3
 346 0064 0E       		.uleb128 0xe
 347 0065 3A       		.uleb128 0x3a
 348 0066 0B       		.uleb128 0xb
 349 0067 3B       		.uleb128 0x3b
 350 0068 05       		.uleb128 0x5
 351 0069 49       		.uleb128 0x49
 352 006a 13       		.uleb128 0x13
 353 006b 00       		.byte	0
 354 006c 00       		.byte	0
 355 006d 0A       		.uleb128 0xa
 356 006e 2E       		.uleb128 0x2e
 357 006f 00       		.byte	0
 358 0070 03       		.uleb128 0x3
 359 0071 0E       		.uleb128 0xe
 360 0072 3A       		.uleb128 0x3a
 361 0073 0B       		.uleb128 0xb
 362 0074 3B       		.uleb128 0x3b
 363 0075 05       		.uleb128 0x5
 364 0076 27       		.uleb128 0x27
 365 0077 19       		.uleb128 0x19
 366 0078 20       		.uleb128 0x20
 367 0079 0B       		.uleb128 0xb
 368 007a 00       		.byte	0
 369 007b 00       		.byte	0
 370 007c 0B       		.uleb128 0xb
 371 007d 2E       		.uleb128 0x2e
 372 007e 01       		.byte	0x1
 373 007f 3F       		.uleb128 0x3f
 374 0080 19       		.uleb128 0x19
 375 0081 03       		.uleb128 0x3
 376 0082 0E       		.uleb128 0xe
 377 0083 3A       		.uleb128 0x3a
 378 0084 0B       		.uleb128 0xb
 379 0085 3B       		.uleb128 0x3b
 380 0086 0B       		.uleb128 0xb
 381 0087 49       		.uleb128 0x49
ARM GAS  /tmp/ccGaHOWR.s 			page 14


 382 0088 13       		.uleb128 0x13
 383 0089 11       		.uleb128 0x11
 384 008a 01       		.uleb128 0x1
 385 008b 12       		.uleb128 0x12
 386 008c 06       		.uleb128 0x6
 387 008d 40       		.uleb128 0x40
 388 008e 18       		.uleb128 0x18
 389 008f 9742     		.uleb128 0x2117
 390 0091 19       		.uleb128 0x19
 391 0092 01       		.uleb128 0x1
 392 0093 13       		.uleb128 0x13
 393 0094 00       		.byte	0
 394 0095 00       		.byte	0
 395 0096 0C       		.uleb128 0xc
 396 0097 1D       		.uleb128 0x1d
 397 0098 00       		.byte	0
 398 0099 31       		.uleb128 0x31
 399 009a 13       		.uleb128 0x13
 400 009b 11       		.uleb128 0x11
 401 009c 01       		.uleb128 0x1
 402 009d 12       		.uleb128 0x12
 403 009e 06       		.uleb128 0x6
 404 009f 58       		.uleb128 0x58
 405 00a0 0B       		.uleb128 0xb
 406 00a1 59       		.uleb128 0x59
 407 00a2 0B       		.uleb128 0xb
 408 00a3 00       		.byte	0
 409 00a4 00       		.byte	0
 410 00a5 0D       		.uleb128 0xd
 411 00a6 898201   		.uleb128 0x4109
 412 00a9 01       		.byte	0x1
 413 00aa 11       		.uleb128 0x11
 414 00ab 01       		.uleb128 0x1
 415 00ac 31       		.uleb128 0x31
 416 00ad 13       		.uleb128 0x13
 417 00ae 00       		.byte	0
 418 00af 00       		.byte	0
 419 00b0 0E       		.uleb128 0xe
 420 00b1 8A8201   		.uleb128 0x410a
 421 00b4 00       		.byte	0
 422 00b5 02       		.uleb128 0x2
 423 00b6 18       		.uleb128 0x18
 424 00b7 9142     		.uleb128 0x2111
 425 00b9 18       		.uleb128 0x18
 426 00ba 00       		.byte	0
 427 00bb 00       		.byte	0
 428 00bc 0F       		.uleb128 0xf
 429 00bd 2E       		.uleb128 0x2e
 430 00be 01       		.byte	0x1
 431 00bf 3F       		.uleb128 0x3f
 432 00c0 19       		.uleb128 0x19
 433 00c1 03       		.uleb128 0x3
 434 00c2 0E       		.uleb128 0xe
 435 00c3 3A       		.uleb128 0x3a
 436 00c4 0B       		.uleb128 0xb
 437 00c5 3B       		.uleb128 0x3b
 438 00c6 0B       		.uleb128 0xb
ARM GAS  /tmp/ccGaHOWR.s 			page 15


 439 00c7 27       		.uleb128 0x27
 440 00c8 19       		.uleb128 0x19
 441 00c9 3C       		.uleb128 0x3c
 442 00ca 19       		.uleb128 0x19
 443 00cb 00       		.byte	0
 444 00cc 00       		.byte	0
 445 00cd 10       		.uleb128 0x10
 446 00ce 05       		.uleb128 0x5
 447 00cf 00       		.byte	0
 448 00d0 49       		.uleb128 0x49
 449 00d1 13       		.uleb128 0x13
 450 00d2 00       		.byte	0
 451 00d3 00       		.byte	0
 452 00d4 00       		.byte	0
 453              		.section	.debug_aranges,"",%progbits
 454 0000 1C000000 		.4byte	0x1c
 455 0004 0200     		.2byte	0x2
 456 0006 00000000 		.4byte	.Ldebug_info0
 457 000a 04       		.byte	0x4
 458 000b 00       		.byte	0
 459 000c 0000     		.2byte	0
 460 000e 0000     		.2byte	0
 461 0010 00000000 		.4byte	.LFB33
 462 0014 38000000 		.4byte	.LFE33-.LFB33
 463 0018 00000000 		.4byte	0
 464 001c 00000000 		.4byte	0
 465              		.section	.debug_ranges,"",%progbits
 466              	.Ldebug_ranges0:
 467 0000 00000000 		.4byte	.LFB33
 468 0004 38000000 		.4byte	.LFE33
 469 0008 00000000 		.4byte	0
 470 000c 00000000 		.4byte	0
 471              		.section	.debug_line,"",%progbits
 472              	.Ldebug_line0:
 473 0000 BB000000 		.section	.debug_str,"MS",%progbits,1
 473      02008900 
 473      00000201 
 473      FB0E0D00 
 473      01010101 
 474              	.LASF3:
 475 0000 6C6F6E67 		.ascii	"long long int\000"
 475      206C6F6E 
 475      6720696E 
 475      7400
 476              	.LASF16:
 477 000e 50494452 		.ascii	"PIDR\000"
 477      00
 478              	.LASF22:
 479 0013 5F5F656E 		.ascii	"__enable_irq\000"
 479      61626C65 
 479      5F697271 
 479      00
 480              	.LASF12:
 481 0020 50434F52 		.ascii	"PCOR\000"
 481      00
 482              	.LASF13:
 483 0025 50544F52 		.ascii	"PTOR\000"
ARM GAS  /tmp/ccGaHOWR.s 			page 16


 483      00
 484              	.LASF6:
 485 002a 6C6F6E67 		.ascii	"long unsigned int\000"
 485      20756E73 
 485      69676E65 
 485      6420696E 
 485      7400
 486              	.LASF7:
 487 003c 6C6F6E67 		.ascii	"long long unsigned int\000"
 487      206C6F6E 
 487      6720756E 
 487      7369676E 
 487      65642069 
 488              	.LASF20:
 489 0053 7372632F 		.ascii	"src/main.c\000"
 489      6D61696E 
 489      2E6300
 490              	.LASF19:
 491 005e 474E5520 		.ascii	"GNU C 4.9.3 20150529 (prerelease) -mthumb -mcpu=cor"
 491      4320342E 
 491      392E3320 
 491      32303135 
 491      30353239 
 492 0091 7465782D 		.ascii	"tex-m0plus -g -Os -fno-common -ffreestanding -fno-b"
 492      6D30706C 
 492      7573202D 
 492      67202D4F 
 492      73202D66 
 493 00c4 75696C74 		.ascii	"uiltin\000"
 493      696E00
 494              	.LASF4:
 495 00cb 756E7369 		.ascii	"unsigned char\000"
 495      676E6564 
 495      20636861 
 495      7200
 496              	.LASF23:
 497 00d9 6D61696E 		.ascii	"main\000"
 497      00
 498              	.LASF11:
 499 00de 50534F52 		.ascii	"PSOR\000"
 499      00
 500              	.LASF2:
 501 00e3 6C6F6E67 		.ascii	"long int\000"
 501      20696E74 
 501      00
 502              	.LASF15:
 503 00ec 50444452 		.ascii	"PDDR\000"
 503      00
 504              	.LASF17:
 505 00f1 75696E74 		.ascii	"uint32_t\000"
 505      33325F74 
 505      00
 506              	.LASF10:
 507 00fa 50444F52 		.ascii	"PDOR\000"
 507      00
 508              	.LASF5:
 509 00ff 73686F72 		.ascii	"short unsigned int\000"
ARM GAS  /tmp/ccGaHOWR.s 			page 17


 509      7420756E 
 509      7369676E 
 509      65642069 
 509      6E7400
 510              	.LASF0:
 511 0112 7369676E 		.ascii	"signed char\000"
 511      65642063 
 511      68617200 
 512              	.LASF18:
 513 011e 4750494F 		.ascii	"GPIO_Type\000"
 513      5F547970 
 513      6500
 514              	.LASF24:
 515 0128 64656C61 		.ascii	"delayms\000"
 515      796D7300 
 516              	.LASF14:
 517 0130 50444952 		.ascii	"PDIR\000"
 517      00
 518              	.LASF1:
 519 0135 73686F72 		.ascii	"short int\000"
 519      7420696E 
 519      7400
 520              	.LASF8:
 521 013f 756E7369 		.ascii	"unsigned int\000"
 521      676E6564 
 521      20696E74 
 521      00
 522              	.LASF9:
 523 014c 73697A65 		.ascii	"sizetype\000"
 523      74797065 
 523      00
 524              	.LASF21:
 525 0155 2F686F6D 		.ascii	"/home/xxx/projects/armmke_dev1/firmware\000"
 525      652F7878 
 525      782F7072 
 525      6F6A6563 
 525      74732F61 
 526              		.ident	"GCC: (15:4.9.3+svn231177-1) 4.9.3 20150529 (prerelease)"
ARM GAS  /tmp/ccGaHOWR.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccGaHOWR.s:18     .text.startup:0000000000000000 $t
     /tmp/ccGaHOWR.s:23     .text.startup:0000000000000000 main
     /tmp/ccGaHOWR.s:75     .text.startup:0000000000000034 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
delayms
