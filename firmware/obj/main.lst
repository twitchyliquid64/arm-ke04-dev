ARM GAS  /tmp/ccBIy0Oi.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.startup,"ax",%progbits
  18              		.align	1
  19              		.global	main
  20              		.code	16
  21              		.thumb_func
  22              		.type	main, %function
  23              	main:
  24              	.LFB33:
  25              		.file 1 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****  * Main
   3:src/main.c    ****  *
   4:src/main.c    ****  * based on work by Kevin Cuzner
   5:src/main.c    ****  * Modified by meh
   6:src/main.c    ****  */
   7:src/main.c    **** 
   8:src/main.c    ****  #include "MKE04Z4.h"
   9:src/main.c    ****  #include "pit.h"
  10:src/main.c    ****  #include <stdint.h>
  11:src/main.c    **** 
  12:src/main.c    **** 
  13:src/main.c    **** 
  14:src/main.c    **** 
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** int main()
  18:src/main.c    **** {
  26              		.loc 1 18 0
  27              		.cfi_startproc
  28 0000 38B5     		push	{r3, r4, r5, lr}
  29              		.cfi_def_cfa_offset 16
  30              		.cfi_offset 3, -16
  31              		.cfi_offset 4, -12
  32              		.cfi_offset 5, -8
  33              		.cfi_offset 14, -4
  34              	.LBB5:
  35              	.LBB6:
  36              		.file 2 "include/core_cmFunc.h"
   1:include/core_cmFunc.h **** /**************************************************************************//**
   2:include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
ARM GAS  /tmp/ccBIy0Oi.s 			page 2


   4:include/core_cmFunc.h ****  * @version  V3.20
   5:include/core_cmFunc.h ****  * @date     25. February 2013
   6:include/core_cmFunc.h ****  *
   7:include/core_cmFunc.h ****  * @note
   8:include/core_cmFunc.h ****  *
   9:include/core_cmFunc.h ****  ******************************************************************************/
  10:include/core_cmFunc.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:include/core_cmFunc.h **** 
  12:include/core_cmFunc.h ****    All rights reserved.
  13:include/core_cmFunc.h ****    Redistribution and use in source and binary forms, with or without
  14:include/core_cmFunc.h ****    modification, are permitted provided that the following conditions are met:
  15:include/core_cmFunc.h ****    - Redistributions of source code must retain the above copyright
  16:include/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer.
  17:include/core_cmFunc.h ****    - Redistributions in binary form must reproduce the above copyright
  18:include/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer in the
  19:include/core_cmFunc.h ****      documentation and/or other materials provided with the distribution.
  20:include/core_cmFunc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:include/core_cmFunc.h ****      to endorse or promote products derived from this software without
  22:include/core_cmFunc.h ****      specific prior written permission.
  23:include/core_cmFunc.h ****    *
  24:include/core_cmFunc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:include/core_cmFunc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:include/core_cmFunc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:include/core_cmFunc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:include/core_cmFunc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:include/core_cmFunc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:include/core_cmFunc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:include/core_cmFunc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:include/core_cmFunc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:include/core_cmFunc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:include/core_cmFunc.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:include/core_cmFunc.h ****    ---------------------------------------------------------------------------*/
  36:include/core_cmFunc.h **** 
  37:include/core_cmFunc.h **** 
  38:include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  39:include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  40:include/core_cmFunc.h **** 
  41:include/core_cmFunc.h **** 
  42:include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  43:include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  44:include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  45:include/core_cmFunc.h ****   @{
  46:include/core_cmFunc.h ****  */
  47:include/core_cmFunc.h **** 
  48:include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:include/core_cmFunc.h **** /* ARM armcc specific functions */
  50:include/core_cmFunc.h **** 
  51:include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  52:include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:include/core_cmFunc.h **** #endif
  54:include/core_cmFunc.h **** 
  55:include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  56:include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  57:include/core_cmFunc.h **** 
  58:include/core_cmFunc.h **** /** \brief  Get Control Register
  59:include/core_cmFunc.h **** 
  60:include/core_cmFunc.h ****     This function returns the content of the Control Register.
ARM GAS  /tmp/ccBIy0Oi.s 			page 3


  61:include/core_cmFunc.h **** 
  62:include/core_cmFunc.h ****     \return               Control Register value
  63:include/core_cmFunc.h ****  */
  64:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  65:include/core_cmFunc.h **** {
  66:include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  67:include/core_cmFunc.h ****   return(__regControl);
  68:include/core_cmFunc.h **** }
  69:include/core_cmFunc.h **** 
  70:include/core_cmFunc.h **** 
  71:include/core_cmFunc.h **** /** \brief  Set Control Register
  72:include/core_cmFunc.h **** 
  73:include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  74:include/core_cmFunc.h **** 
  75:include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  76:include/core_cmFunc.h ****  */
  77:include/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  78:include/core_cmFunc.h **** {
  79:include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  80:include/core_cmFunc.h ****   __regControl = control;
  81:include/core_cmFunc.h **** }
  82:include/core_cmFunc.h **** 
  83:include/core_cmFunc.h **** 
  84:include/core_cmFunc.h **** /** \brief  Get IPSR Register
  85:include/core_cmFunc.h **** 
  86:include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  87:include/core_cmFunc.h **** 
  88:include/core_cmFunc.h ****     \return               IPSR Register value
  89:include/core_cmFunc.h ****  */
  90:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  91:include/core_cmFunc.h **** {
  92:include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  93:include/core_cmFunc.h ****   return(__regIPSR);
  94:include/core_cmFunc.h **** }
  95:include/core_cmFunc.h **** 
  96:include/core_cmFunc.h **** 
  97:include/core_cmFunc.h **** /** \brief  Get APSR Register
  98:include/core_cmFunc.h **** 
  99:include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 100:include/core_cmFunc.h **** 
 101:include/core_cmFunc.h ****     \return               APSR Register value
 102:include/core_cmFunc.h ****  */
 103:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
 104:include/core_cmFunc.h **** {
 105:include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
 106:include/core_cmFunc.h ****   return(__regAPSR);
 107:include/core_cmFunc.h **** }
 108:include/core_cmFunc.h **** 
 109:include/core_cmFunc.h **** 
 110:include/core_cmFunc.h **** /** \brief  Get xPSR Register
 111:include/core_cmFunc.h **** 
 112:include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 113:include/core_cmFunc.h **** 
 114:include/core_cmFunc.h ****     \return               xPSR Register value
 115:include/core_cmFunc.h ****  */
 116:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 117:include/core_cmFunc.h **** {
ARM GAS  /tmp/ccBIy0Oi.s 			page 4


 118:include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 119:include/core_cmFunc.h ****   return(__regXPSR);
 120:include/core_cmFunc.h **** }
 121:include/core_cmFunc.h **** 
 122:include/core_cmFunc.h **** 
 123:include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 124:include/core_cmFunc.h **** 
 125:include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 126:include/core_cmFunc.h **** 
 127:include/core_cmFunc.h ****     \return               PSP Register value
 128:include/core_cmFunc.h ****  */
 129:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 130:include/core_cmFunc.h **** {
 131:include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 132:include/core_cmFunc.h ****   return(__regProcessStackPointer);
 133:include/core_cmFunc.h **** }
 134:include/core_cmFunc.h **** 
 135:include/core_cmFunc.h **** 
 136:include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 137:include/core_cmFunc.h **** 
 138:include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 139:include/core_cmFunc.h **** 
 140:include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 141:include/core_cmFunc.h ****  */
 142:include/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 143:include/core_cmFunc.h **** {
 144:include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 145:include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 146:include/core_cmFunc.h **** }
 147:include/core_cmFunc.h **** 
 148:include/core_cmFunc.h **** 
 149:include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 150:include/core_cmFunc.h **** 
 151:include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 152:include/core_cmFunc.h **** 
 153:include/core_cmFunc.h ****     \return               MSP Register value
 154:include/core_cmFunc.h ****  */
 155:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 156:include/core_cmFunc.h **** {
 157:include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 158:include/core_cmFunc.h ****   return(__regMainStackPointer);
 159:include/core_cmFunc.h **** }
 160:include/core_cmFunc.h **** 
 161:include/core_cmFunc.h **** 
 162:include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 163:include/core_cmFunc.h **** 
 164:include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 165:include/core_cmFunc.h **** 
 166:include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 167:include/core_cmFunc.h ****  */
 168:include/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 169:include/core_cmFunc.h **** {
 170:include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 171:include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 172:include/core_cmFunc.h **** }
 173:include/core_cmFunc.h **** 
 174:include/core_cmFunc.h **** 
ARM GAS  /tmp/ccBIy0Oi.s 			page 5


 175:include/core_cmFunc.h **** /** \brief  Get Priority Mask
 176:include/core_cmFunc.h **** 
 177:include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 178:include/core_cmFunc.h **** 
 179:include/core_cmFunc.h ****     \return               Priority Mask value
 180:include/core_cmFunc.h ****  */
 181:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 182:include/core_cmFunc.h **** {
 183:include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 184:include/core_cmFunc.h ****   return(__regPriMask);
 185:include/core_cmFunc.h **** }
 186:include/core_cmFunc.h **** 
 187:include/core_cmFunc.h **** 
 188:include/core_cmFunc.h **** /** \brief  Set Priority Mask
 189:include/core_cmFunc.h **** 
 190:include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 191:include/core_cmFunc.h **** 
 192:include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 193:include/core_cmFunc.h ****  */
 194:include/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 195:include/core_cmFunc.h **** {
 196:include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 197:include/core_cmFunc.h ****   __regPriMask = (priMask);
 198:include/core_cmFunc.h **** }
 199:include/core_cmFunc.h **** 
 200:include/core_cmFunc.h **** 
 201:include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 202:include/core_cmFunc.h **** 
 203:include/core_cmFunc.h **** /** \brief  Enable FIQ
 204:include/core_cmFunc.h **** 
 205:include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 206:include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 207:include/core_cmFunc.h ****  */
 208:include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 209:include/core_cmFunc.h **** 
 210:include/core_cmFunc.h **** 
 211:include/core_cmFunc.h **** /** \brief  Disable FIQ
 212:include/core_cmFunc.h **** 
 213:include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 214:include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 215:include/core_cmFunc.h ****  */
 216:include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 217:include/core_cmFunc.h **** 
 218:include/core_cmFunc.h **** 
 219:include/core_cmFunc.h **** /** \brief  Get Base Priority
 220:include/core_cmFunc.h **** 
 221:include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 222:include/core_cmFunc.h **** 
 223:include/core_cmFunc.h ****     \return               Base Priority register value
 224:include/core_cmFunc.h ****  */
 225:include/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 226:include/core_cmFunc.h **** {
 227:include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 228:include/core_cmFunc.h ****   return(__regBasePri);
 229:include/core_cmFunc.h **** }
 230:include/core_cmFunc.h **** 
 231:include/core_cmFunc.h **** 
ARM GAS  /tmp/ccBIy0Oi.s 			page 6


 232:include/core_cmFunc.h **** /** \brief  Set Base Priority
 233:include/core_cmFunc.h **** 
 234:include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 235:include/core_cmFunc.h **** 
 236:include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 237:include/core_cmFunc.h ****  */
 238:include/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 239:include/core_cmFunc.h **** {
 240:include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 241:include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 242:include/core_cmFunc.h **** }
 243:include/core_cmFunc.h **** 
 244:include/core_cmFunc.h **** 
 245:include/core_cmFunc.h **** /** \brief  Get Fault Mask
 246:include/core_cmFunc.h **** 
 247:include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 248:include/core_cmFunc.h **** 
 249:include/core_cmFunc.h ****     \return               Fault Mask register value
 250:include/core_cmFunc.h ****  */
 251:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 252:include/core_cmFunc.h **** {
 253:include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 254:include/core_cmFunc.h ****   return(__regFaultMask);
 255:include/core_cmFunc.h **** }
 256:include/core_cmFunc.h **** 
 257:include/core_cmFunc.h **** 
 258:include/core_cmFunc.h **** /** \brief  Set Fault Mask
 259:include/core_cmFunc.h **** 
 260:include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 261:include/core_cmFunc.h **** 
 262:include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 263:include/core_cmFunc.h ****  */
 264:include/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 265:include/core_cmFunc.h **** {
 266:include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 267:include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 268:include/core_cmFunc.h **** }
 269:include/core_cmFunc.h **** 
 270:include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 271:include/core_cmFunc.h **** 
 272:include/core_cmFunc.h **** 
 273:include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 274:include/core_cmFunc.h **** 
 275:include/core_cmFunc.h **** /** \brief  Get FPSCR
 276:include/core_cmFunc.h **** 
 277:include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 278:include/core_cmFunc.h **** 
 279:include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 280:include/core_cmFunc.h ****  */
 281:include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 282:include/core_cmFunc.h **** {
 283:include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 284:include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 285:include/core_cmFunc.h ****   return(__regfpscr);
 286:include/core_cmFunc.h **** #else
 287:include/core_cmFunc.h ****    return(0);
 288:include/core_cmFunc.h **** #endif
ARM GAS  /tmp/ccBIy0Oi.s 			page 7


 289:include/core_cmFunc.h **** }
 290:include/core_cmFunc.h **** 
 291:include/core_cmFunc.h **** 
 292:include/core_cmFunc.h **** /** \brief  Set FPSCR
 293:include/core_cmFunc.h **** 
 294:include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 295:include/core_cmFunc.h **** 
 296:include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 297:include/core_cmFunc.h ****  */
 298:include/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 299:include/core_cmFunc.h **** {
 300:include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 301:include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 302:include/core_cmFunc.h ****   __regfpscr = (fpscr);
 303:include/core_cmFunc.h **** #endif
 304:include/core_cmFunc.h **** }
 305:include/core_cmFunc.h **** 
 306:include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 307:include/core_cmFunc.h **** 
 308:include/core_cmFunc.h **** 
 309:include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 310:include/core_cmFunc.h **** /* IAR iccarm specific functions */
 311:include/core_cmFunc.h **** 
 312:include/core_cmFunc.h **** #include <cmsis_iar.h>
 313:include/core_cmFunc.h **** 
 314:include/core_cmFunc.h **** 
 315:include/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 316:include/core_cmFunc.h **** /* TI CCS specific functions */
 317:include/core_cmFunc.h **** 
 318:include/core_cmFunc.h **** #include <cmsis_ccs.h>
 319:include/core_cmFunc.h **** 
 320:include/core_cmFunc.h **** 
 321:include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 322:include/core_cmFunc.h **** /* GNU gcc specific functions */
 323:include/core_cmFunc.h **** 
 324:include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 325:include/core_cmFunc.h **** 
 326:include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 327:include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 328:include/core_cmFunc.h ****  */
 329:include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 330:include/core_cmFunc.h **** {
 331:include/core_cmFunc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  37              		.loc 2 331 0
  38              	@ 331 "include/core_cmFunc.h" 1
  39 0002 62B6     		cpsie i
  40              	@ 0 "" 2
  41              		.code	16
  42              	.LBE6:
  43              	.LBE5:
  19:src/main.c    ****     __enable_irq(); //Whats this for
  20:src/main.c    **** 
  21:src/main.c    ****     GPIOA->PIDR |= 1 << 17;
  44              		.loc 1 21 0
  45 0004 8021     		mov	r1, #128
  46 0006 0E4B     		ldr	r3, .L5
  47 0008 8902     		lsl	r1, r1, #10
ARM GAS  /tmp/ccBIy0Oi.s 			page 8


  48 000a 1C1C     		mov	r4, r3
  49 000c 9A69     		ldr	r2, [r3, #24]
  50 000e 0A43     		orr	r2, r1
  51 0010 9A61     		str	r2, [r3, #24]
  22:src/main.c    ****     GPIOA->PDDR |= 1 << 17;
  52              		.loc 1 22 0
  53 0012 5A69     		ldr	r2, [r3, #20]
  54 0014 0A43     		orr	r2, r1
  55 0016 5A61     		str	r2, [r3, #20]
  23:src/main.c    ****     GPIOA->PSOR |= 1 << 17;
  56              		.loc 1 23 0
  57 0018 5A68     		ldr	r2, [r3, #4]
  58 001a 0A43     		orr	r2, r1
  59 001c 5A60     		str	r2, [r3, #4]
  60              	.L3:
  61              	.LBB7:
  24:src/main.c    **** 
  25:src/main.c    ****     while (1)
  26:src/main.c    ****     {
  27:src/main.c    ****         uint32_t ticks = getTicks();
  62              		.loc 1 27 0
  63 001e FFF7FEFF 		bl	getTicks
  64              	.LVL0:
  65 0022 051C     		mov	r5, r0
  66              	.LVL1:
  67              	.L2:
  28:src/main.c    ****         while ((ticks+1000) > getTicks());
  68              		.loc 1 28 0 discriminator 1
  69 0024 FFF7FEFF 		bl	getTicks
  70              	.LVL2:
  71 0028 FA23     		mov	r3, #250
  72 002a 9B00     		lsl	r3, r3, #2
  73 002c EB18     		add	r3, r5, r3
  74 002e 8342     		cmp	r3, r0
  75 0030 F8D8     		bhi	.L2
  29:src/main.c    ****         GPIOA->PTOR |= 1 << 17;
  76              		.loc 1 29 0
  77 0032 8022     		mov	r2, #128
  78 0034 E368     		ldr	r3, [r4, #12]
  79 0036 9202     		lsl	r2, r2, #10
  80 0038 1343     		orr	r3, r2
  81 003a E360     		str	r3, [r4, #12]
  82              	.LBE7:
  30:src/main.c    **** 
  31:src/main.c    ****         //on every cycle we pet the dog
  32:src/main.c    ****         //NOTE: We cannot use an interrupt to reset the watchdog.
  33:src/main.c    ****         //It causes a hard fault or something that cuases the CPU to reset :(
  34:src/main.c    ****         //__disable_irq();
  35:src/main.c    ****         //WDOG->CNT = 0x02A6;
  36:src/main.c    ****         //WDOG->CNT = 0x80B4;
  37:src/main.c    ****         //__enable_irq();
  38:src/main.c    ****     }
  83              		.loc 1 38 0
  84 003c EFE7     		b	.L3
  85              	.L6:
  86 003e C046     		.align	2
  87              	.L5:
ARM GAS  /tmp/ccBIy0Oi.s 			page 9


  88 0040 00F00F40 		.word	1074786304
  89              		.cfi_endproc
  90              	.LFE33:
  91              		.size	main, .-main
  92              		.text
  93              	.Letext0:
  94              		.file 3 "include/MKE04Z4.h"
  95              		.file 4 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stdint-gcc.h"
  96              		.file 5 "include/pit.h"
  97              		.section	.debug_info,"",%progbits
  98              	.Ldebug_info0:
  99 0000 5D010000 		.4byte	0x15d
 100 0004 0400     		.2byte	0x4
 101 0006 00000000 		.4byte	.Ldebug_abbrev0
 102 000a 04       		.byte	0x4
 103 000b 01       		.uleb128 0x1
 104 000c 6C000000 		.4byte	.LASF19
 105 0010 01       		.byte	0x1
 106 0011 61000000 		.4byte	.LASF20
 107 0015 5C010000 		.4byte	.LASF21
 108 0019 00000000 		.4byte	.Ldebug_ranges0+0
 109 001d 00000000 		.4byte	0
 110 0021 00000000 		.4byte	.Ldebug_line0
 111 0025 02       		.uleb128 0x2
 112 0026 01       		.byte	0x1
 113 0027 06       		.byte	0x6
 114 0028 22010000 		.4byte	.LASF0
 115 002c 02       		.uleb128 0x2
 116 002d 02       		.byte	0x2
 117 002e 05       		.byte	0x5
 118 002f F2000000 		.4byte	.LASF1
 119 0033 02       		.uleb128 0x2
 120 0034 04       		.byte	0x4
 121 0035 05       		.byte	0x5
 122 0036 E9000000 		.4byte	.LASF2
 123 003a 02       		.uleb128 0x2
 124 003b 08       		.byte	0x8
 125 003c 05       		.byte	0x5
 126 003d 00000000 		.4byte	.LASF3
 127 0041 02       		.uleb128 0x2
 128 0042 01       		.byte	0x1
 129 0043 08       		.byte	0x8
 130 0044 25000000 		.4byte	.LASF4
 131 0048 02       		.uleb128 0x2
 132 0049 02       		.byte	0x2
 133 004a 07       		.byte	0x7
 134 004b 0F010000 		.4byte	.LASF5
 135 004f 03       		.uleb128 0x3
 136 0050 01010000 		.4byte	.LASF17
 137 0054 04       		.byte	0x4
 138 0055 34       		.byte	0x34
 139 0056 5A000000 		.4byte	0x5a
 140 005a 02       		.uleb128 0x2
 141 005b 04       		.byte	0x4
 142 005c 07       		.byte	0x7
 143 005d 38000000 		.4byte	.LASF6
 144 0061 02       		.uleb128 0x2
ARM GAS  /tmp/ccBIy0Oi.s 			page 10


 145 0062 08       		.byte	0x8
 146 0063 07       		.byte	0x7
 147 0064 4A000000 		.4byte	.LASF7
 148 0068 04       		.uleb128 0x4
 149 0069 04       		.byte	0x4
 150 006a 05       		.byte	0x5
 151 006b 696E7400 		.ascii	"int\000"
 152 006f 02       		.uleb128 0x2
 153 0070 04       		.byte	0x4
 154 0071 07       		.byte	0x7
 155 0072 46010000 		.4byte	.LASF8
 156 0076 02       		.uleb128 0x2
 157 0077 04       		.byte	0x4
 158 0078 07       		.byte	0x7
 159 0079 53010000 		.4byte	.LASF9
 160 007d 05       		.uleb128 0x5
 161 007e 82000000 		.4byte	0x82
 162 0082 06       		.uleb128 0x6
 163 0083 4F000000 		.4byte	0x4f
 164 0087 07       		.uleb128 0x7
 165 0088 1C       		.byte	0x1c
 166 0089 03       		.byte	0x3
 167 008a 9804     		.2byte	0x498
 168 008c EC000000 		.4byte	0xec
 169 0090 08       		.uleb128 0x8
 170 0091 0A010000 		.4byte	.LASF10
 171 0095 03       		.byte	0x3
 172 0096 9904     		.2byte	0x499
 173 0098 82000000 		.4byte	0x82
 174 009c 00       		.byte	0
 175 009d 08       		.uleb128 0x8
 176 009e E4000000 		.4byte	.LASF11
 177 00a2 03       		.byte	0x3
 178 00a3 9A04     		.2byte	0x49a
 179 00a5 82000000 		.4byte	0x82
 180 00a9 04       		.byte	0x4
 181 00aa 08       		.uleb128 0x8
 182 00ab 20000000 		.4byte	.LASF12
 183 00af 03       		.byte	0x3
 184 00b0 9B04     		.2byte	0x49b
 185 00b2 82000000 		.4byte	0x82
 186 00b6 08       		.byte	0x8
 187 00b7 08       		.uleb128 0x8
 188 00b8 33000000 		.4byte	.LASF13
 189 00bc 03       		.byte	0x3
 190 00bd 9C04     		.2byte	0x49c
 191 00bf 82000000 		.4byte	0x82
 192 00c3 0C       		.byte	0xc
 193 00c4 08       		.uleb128 0x8
 194 00c5 38010000 		.4byte	.LASF14
 195 00c9 03       		.byte	0x3
 196 00ca 9D04     		.2byte	0x49d
 197 00cc 7D000000 		.4byte	0x7d
 198 00d0 10       		.byte	0x10
 199 00d1 08       		.uleb128 0x8
 200 00d2 FC000000 		.4byte	.LASF15
 201 00d6 03       		.byte	0x3
ARM GAS  /tmp/ccBIy0Oi.s 			page 11


 202 00d7 9E04     		.2byte	0x49e
 203 00d9 82000000 		.4byte	0x82
 204 00dd 14       		.byte	0x14
 205 00de 08       		.uleb128 0x8
 206 00df 0E000000 		.4byte	.LASF16
 207 00e3 03       		.byte	0x3
 208 00e4 9F04     		.2byte	0x49f
 209 00e6 82000000 		.4byte	0x82
 210 00ea 18       		.byte	0x18
 211 00eb 00       		.byte	0
 212 00ec 09       		.uleb128 0x9
 213 00ed 2E010000 		.4byte	.LASF18
 214 00f1 03       		.byte	0x3
 215 00f2 A004     		.2byte	0x4a0
 216 00f4 87000000 		.4byte	0x87
 217 00f8 0A       		.uleb128 0xa
 218 00f9 13000000 		.4byte	.LASF22
 219 00fd 02       		.byte	0x2
 220 00fe 4901     		.2byte	0x149
 221 0100 03       		.byte	0x3
 222 0101 0B       		.uleb128 0xb
 223 0102 DF000000 		.4byte	.LASF23
 224 0106 01       		.byte	0x1
 225 0107 11       		.byte	0x11
 226 0108 68000000 		.4byte	0x68
 227 010c 00000000 		.4byte	.LFB33
 228 0110 44000000 		.4byte	.LFE33-.LFB33
 229 0114 01       		.uleb128 0x1
 230 0115 9C       		.byte	0x9c
 231 0116 53010000 		.4byte	0x153
 232 011a 0C       		.uleb128 0xc
 233 011b F8000000 		.4byte	0xf8
 234 011f 02000000 		.4byte	.LBB5
 235 0123 02000000 		.4byte	.LBE5-.LBB5
 236 0127 01       		.byte	0x1
 237 0128 13       		.byte	0x13
 238 0129 0D       		.uleb128 0xd
 239 012a 1E000000 		.4byte	.LBB7
 240 012e 1E000000 		.4byte	.LBE7-.LBB7
 241 0132 0E       		.uleb128 0xe
 242 0133 D9000000 		.4byte	.LASF24
 243 0137 01       		.byte	0x1
 244 0138 1B       		.byte	0x1b
 245 0139 4F000000 		.4byte	0x4f
 246 013d 01       		.uleb128 0x1
 247 013e 55       		.byte	0x55
 248 013f 0F       		.uleb128 0xf
 249 0140 22000000 		.4byte	.LVL0
 250 0144 53010000 		.4byte	0x153
 251 0148 0F       		.uleb128 0xf
 252 0149 28000000 		.4byte	.LVL2
 253 014d 53010000 		.4byte	0x153
 254 0151 00       		.byte	0
 255 0152 00       		.byte	0
 256 0153 10       		.uleb128 0x10
 257 0154 3D010000 		.4byte	.LASF25
 258 0158 05       		.byte	0x5
ARM GAS  /tmp/ccBIy0Oi.s 			page 12


 259 0159 05       		.byte	0x5
 260 015a 4F000000 		.4byte	0x4f
 261 015e 11       		.uleb128 0x11
 262 015f 00       		.byte	0
 263 0160 00       		.byte	0
 264              		.section	.debug_abbrev,"",%progbits
 265              	.Ldebug_abbrev0:
 266 0000 01       		.uleb128 0x1
 267 0001 11       		.uleb128 0x11
 268 0002 01       		.byte	0x1
 269 0003 25       		.uleb128 0x25
 270 0004 0E       		.uleb128 0xe
 271 0005 13       		.uleb128 0x13
 272 0006 0B       		.uleb128 0xb
 273 0007 03       		.uleb128 0x3
 274 0008 0E       		.uleb128 0xe
 275 0009 1B       		.uleb128 0x1b
 276 000a 0E       		.uleb128 0xe
 277 000b 55       		.uleb128 0x55
 278 000c 17       		.uleb128 0x17
 279 000d 11       		.uleb128 0x11
 280 000e 01       		.uleb128 0x1
 281 000f 10       		.uleb128 0x10
 282 0010 17       		.uleb128 0x17
 283 0011 00       		.byte	0
 284 0012 00       		.byte	0
 285 0013 02       		.uleb128 0x2
 286 0014 24       		.uleb128 0x24
 287 0015 00       		.byte	0
 288 0016 0B       		.uleb128 0xb
 289 0017 0B       		.uleb128 0xb
 290 0018 3E       		.uleb128 0x3e
 291 0019 0B       		.uleb128 0xb
 292 001a 03       		.uleb128 0x3
 293 001b 0E       		.uleb128 0xe
 294 001c 00       		.byte	0
 295 001d 00       		.byte	0
 296 001e 03       		.uleb128 0x3
 297 001f 16       		.uleb128 0x16
 298 0020 00       		.byte	0
 299 0021 03       		.uleb128 0x3
 300 0022 0E       		.uleb128 0xe
 301 0023 3A       		.uleb128 0x3a
 302 0024 0B       		.uleb128 0xb
 303 0025 3B       		.uleb128 0x3b
 304 0026 0B       		.uleb128 0xb
 305 0027 49       		.uleb128 0x49
 306 0028 13       		.uleb128 0x13
 307 0029 00       		.byte	0
 308 002a 00       		.byte	0
 309 002b 04       		.uleb128 0x4
 310 002c 24       		.uleb128 0x24
 311 002d 00       		.byte	0
 312 002e 0B       		.uleb128 0xb
 313 002f 0B       		.uleb128 0xb
 314 0030 3E       		.uleb128 0x3e
 315 0031 0B       		.uleb128 0xb
ARM GAS  /tmp/ccBIy0Oi.s 			page 13


 316 0032 03       		.uleb128 0x3
 317 0033 08       		.uleb128 0x8
 318 0034 00       		.byte	0
 319 0035 00       		.byte	0
 320 0036 05       		.uleb128 0x5
 321 0037 26       		.uleb128 0x26
 322 0038 00       		.byte	0
 323 0039 49       		.uleb128 0x49
 324 003a 13       		.uleb128 0x13
 325 003b 00       		.byte	0
 326 003c 00       		.byte	0
 327 003d 06       		.uleb128 0x6
 328 003e 35       		.uleb128 0x35
 329 003f 00       		.byte	0
 330 0040 49       		.uleb128 0x49
 331 0041 13       		.uleb128 0x13
 332 0042 00       		.byte	0
 333 0043 00       		.byte	0
 334 0044 07       		.uleb128 0x7
 335 0045 13       		.uleb128 0x13
 336 0046 01       		.byte	0x1
 337 0047 0B       		.uleb128 0xb
 338 0048 0B       		.uleb128 0xb
 339 0049 3A       		.uleb128 0x3a
 340 004a 0B       		.uleb128 0xb
 341 004b 3B       		.uleb128 0x3b
 342 004c 05       		.uleb128 0x5
 343 004d 01       		.uleb128 0x1
 344 004e 13       		.uleb128 0x13
 345 004f 00       		.byte	0
 346 0050 00       		.byte	0
 347 0051 08       		.uleb128 0x8
 348 0052 0D       		.uleb128 0xd
 349 0053 00       		.byte	0
 350 0054 03       		.uleb128 0x3
 351 0055 0E       		.uleb128 0xe
 352 0056 3A       		.uleb128 0x3a
 353 0057 0B       		.uleb128 0xb
 354 0058 3B       		.uleb128 0x3b
 355 0059 05       		.uleb128 0x5
 356 005a 49       		.uleb128 0x49
 357 005b 13       		.uleb128 0x13
 358 005c 38       		.uleb128 0x38
 359 005d 0B       		.uleb128 0xb
 360 005e 00       		.byte	0
 361 005f 00       		.byte	0
 362 0060 09       		.uleb128 0x9
 363 0061 16       		.uleb128 0x16
 364 0062 00       		.byte	0
 365 0063 03       		.uleb128 0x3
 366 0064 0E       		.uleb128 0xe
 367 0065 3A       		.uleb128 0x3a
 368 0066 0B       		.uleb128 0xb
 369 0067 3B       		.uleb128 0x3b
 370 0068 05       		.uleb128 0x5
 371 0069 49       		.uleb128 0x49
 372 006a 13       		.uleb128 0x13
ARM GAS  /tmp/ccBIy0Oi.s 			page 14


 373 006b 00       		.byte	0
 374 006c 00       		.byte	0
 375 006d 0A       		.uleb128 0xa
 376 006e 2E       		.uleb128 0x2e
 377 006f 00       		.byte	0
 378 0070 03       		.uleb128 0x3
 379 0071 0E       		.uleb128 0xe
 380 0072 3A       		.uleb128 0x3a
 381 0073 0B       		.uleb128 0xb
 382 0074 3B       		.uleb128 0x3b
 383 0075 05       		.uleb128 0x5
 384 0076 27       		.uleb128 0x27
 385 0077 19       		.uleb128 0x19
 386 0078 20       		.uleb128 0x20
 387 0079 0B       		.uleb128 0xb
 388 007a 00       		.byte	0
 389 007b 00       		.byte	0
 390 007c 0B       		.uleb128 0xb
 391 007d 2E       		.uleb128 0x2e
 392 007e 01       		.byte	0x1
 393 007f 3F       		.uleb128 0x3f
 394 0080 19       		.uleb128 0x19
 395 0081 03       		.uleb128 0x3
 396 0082 0E       		.uleb128 0xe
 397 0083 3A       		.uleb128 0x3a
 398 0084 0B       		.uleb128 0xb
 399 0085 3B       		.uleb128 0x3b
 400 0086 0B       		.uleb128 0xb
 401 0087 49       		.uleb128 0x49
 402 0088 13       		.uleb128 0x13
 403 0089 11       		.uleb128 0x11
 404 008a 01       		.uleb128 0x1
 405 008b 12       		.uleb128 0x12
 406 008c 06       		.uleb128 0x6
 407 008d 40       		.uleb128 0x40
 408 008e 18       		.uleb128 0x18
 409 008f 9742     		.uleb128 0x2117
 410 0091 19       		.uleb128 0x19
 411 0092 01       		.uleb128 0x1
 412 0093 13       		.uleb128 0x13
 413 0094 00       		.byte	0
 414 0095 00       		.byte	0
 415 0096 0C       		.uleb128 0xc
 416 0097 1D       		.uleb128 0x1d
 417 0098 00       		.byte	0
 418 0099 31       		.uleb128 0x31
 419 009a 13       		.uleb128 0x13
 420 009b 11       		.uleb128 0x11
 421 009c 01       		.uleb128 0x1
 422 009d 12       		.uleb128 0x12
 423 009e 06       		.uleb128 0x6
 424 009f 58       		.uleb128 0x58
 425 00a0 0B       		.uleb128 0xb
 426 00a1 59       		.uleb128 0x59
 427 00a2 0B       		.uleb128 0xb
 428 00a3 00       		.byte	0
 429 00a4 00       		.byte	0
ARM GAS  /tmp/ccBIy0Oi.s 			page 15


 430 00a5 0D       		.uleb128 0xd
 431 00a6 0B       		.uleb128 0xb
 432 00a7 01       		.byte	0x1
 433 00a8 11       		.uleb128 0x11
 434 00a9 01       		.uleb128 0x1
 435 00aa 12       		.uleb128 0x12
 436 00ab 06       		.uleb128 0x6
 437 00ac 00       		.byte	0
 438 00ad 00       		.byte	0
 439 00ae 0E       		.uleb128 0xe
 440 00af 34       		.uleb128 0x34
 441 00b0 00       		.byte	0
 442 00b1 03       		.uleb128 0x3
 443 00b2 0E       		.uleb128 0xe
 444 00b3 3A       		.uleb128 0x3a
 445 00b4 0B       		.uleb128 0xb
 446 00b5 3B       		.uleb128 0x3b
 447 00b6 0B       		.uleb128 0xb
 448 00b7 49       		.uleb128 0x49
 449 00b8 13       		.uleb128 0x13
 450 00b9 02       		.uleb128 0x2
 451 00ba 18       		.uleb128 0x18
 452 00bb 00       		.byte	0
 453 00bc 00       		.byte	0
 454 00bd 0F       		.uleb128 0xf
 455 00be 898201   		.uleb128 0x4109
 456 00c1 00       		.byte	0
 457 00c2 11       		.uleb128 0x11
 458 00c3 01       		.uleb128 0x1
 459 00c4 31       		.uleb128 0x31
 460 00c5 13       		.uleb128 0x13
 461 00c6 00       		.byte	0
 462 00c7 00       		.byte	0
 463 00c8 10       		.uleb128 0x10
 464 00c9 2E       		.uleb128 0x2e
 465 00ca 01       		.byte	0x1
 466 00cb 3F       		.uleb128 0x3f
 467 00cc 19       		.uleb128 0x19
 468 00cd 03       		.uleb128 0x3
 469 00ce 0E       		.uleb128 0xe
 470 00cf 3A       		.uleb128 0x3a
 471 00d0 0B       		.uleb128 0xb
 472 00d1 3B       		.uleb128 0x3b
 473 00d2 0B       		.uleb128 0xb
 474 00d3 49       		.uleb128 0x49
 475 00d4 13       		.uleb128 0x13
 476 00d5 3C       		.uleb128 0x3c
 477 00d6 19       		.uleb128 0x19
 478 00d7 00       		.byte	0
 479 00d8 00       		.byte	0
 480 00d9 11       		.uleb128 0x11
 481 00da 18       		.uleb128 0x18
 482 00db 00       		.byte	0
 483 00dc 00       		.byte	0
 484 00dd 00       		.byte	0
 485 00de 00       		.byte	0
 486              		.section	.debug_aranges,"",%progbits
ARM GAS  /tmp/ccBIy0Oi.s 			page 16


 487 0000 1C000000 		.4byte	0x1c
 488 0004 0200     		.2byte	0x2
 489 0006 00000000 		.4byte	.Ldebug_info0
 490 000a 04       		.byte	0x4
 491 000b 00       		.byte	0
 492 000c 0000     		.2byte	0
 493 000e 0000     		.2byte	0
 494 0010 00000000 		.4byte	.LFB33
 495 0014 44000000 		.4byte	.LFE33-.LFB33
 496 0018 00000000 		.4byte	0
 497 001c 00000000 		.4byte	0
 498              		.section	.debug_ranges,"",%progbits
 499              	.Ldebug_ranges0:
 500 0000 00000000 		.4byte	.LFB33
 501 0004 44000000 		.4byte	.LFE33
 502 0008 00000000 		.4byte	0
 503 000c 00000000 		.4byte	0
 504              		.section	.debug_line,"",%progbits
 505              	.Ldebug_line0:
 506 0000 B6000000 		.section	.debug_str,"MS",%progbits,1
 506      02008900 
 506      00000201 
 506      FB0E0D00 
 506      01010101 
 507              	.LASF3:
 508 0000 6C6F6E67 		.ascii	"long long int\000"
 508      206C6F6E 
 508      6720696E 
 508      7400
 509              	.LASF16:
 510 000e 50494452 		.ascii	"PIDR\000"
 510      00
 511              	.LASF22:
 512 0013 5F5F656E 		.ascii	"__enable_irq\000"
 512      61626C65 
 512      5F697271 
 512      00
 513              	.LASF12:
 514 0020 50434F52 		.ascii	"PCOR\000"
 514      00
 515              	.LASF4:
 516 0025 756E7369 		.ascii	"unsigned char\000"
 516      676E6564 
 516      20636861 
 516      7200
 517              	.LASF13:
 518 0033 50544F52 		.ascii	"PTOR\000"
 518      00
 519              	.LASF6:
 520 0038 6C6F6E67 		.ascii	"long unsigned int\000"
 520      20756E73 
 520      69676E65 
 520      6420696E 
 520      7400
 521              	.LASF7:
 522 004a 6C6F6E67 		.ascii	"long long unsigned int\000"
 522      206C6F6E 
ARM GAS  /tmp/ccBIy0Oi.s 			page 17


 522      6720756E 
 522      7369676E 
 522      65642069 
 523              	.LASF20:
 524 0061 7372632F 		.ascii	"src/main.c\000"
 524      6D61696E 
 524      2E6300
 525              	.LASF19:
 526 006c 474E5520 		.ascii	"GNU C 4.9.3 20150529 (prerelease) -mthumb -mcpu=cor"
 526      4320342E 
 526      392E3320 
 526      32303135 
 526      30353239 
 527 009f 7465782D 		.ascii	"tex-m0plus -g -Os -fno-common -ffreestanding -fno-b"
 527      6D30706C 
 527      7573202D 
 527      67202D4F 
 527      73202D66 
 528 00d2 75696C74 		.ascii	"uiltin\000"
 528      696E00
 529              	.LASF24:
 530 00d9 7469636B 		.ascii	"ticks\000"
 530      7300
 531              	.LASF23:
 532 00df 6D61696E 		.ascii	"main\000"
 532      00
 533              	.LASF11:
 534 00e4 50534F52 		.ascii	"PSOR\000"
 534      00
 535              	.LASF2:
 536 00e9 6C6F6E67 		.ascii	"long int\000"
 536      20696E74 
 536      00
 537              	.LASF1:
 538 00f2 73686F72 		.ascii	"short int\000"
 538      7420696E 
 538      7400
 539              	.LASF15:
 540 00fc 50444452 		.ascii	"PDDR\000"
 540      00
 541              	.LASF17:
 542 0101 75696E74 		.ascii	"uint32_t\000"
 542      33325F74 
 542      00
 543              	.LASF10:
 544 010a 50444F52 		.ascii	"PDOR\000"
 544      00
 545              	.LASF5:
 546 010f 73686F72 		.ascii	"short unsigned int\000"
 546      7420756E 
 546      7369676E 
 546      65642069 
 546      6E7400
 547              	.LASF0:
 548 0122 7369676E 		.ascii	"signed char\000"
 548      65642063 
 548      68617200 
ARM GAS  /tmp/ccBIy0Oi.s 			page 18


 549              	.LASF18:
 550 012e 4750494F 		.ascii	"GPIO_Type\000"
 550      5F547970 
 550      6500
 551              	.LASF14:
 552 0138 50444952 		.ascii	"PDIR\000"
 552      00
 553              	.LASF25:
 554 013d 67657454 		.ascii	"getTicks\000"
 554      69636B73 
 554      00
 555              	.LASF8:
 556 0146 756E7369 		.ascii	"unsigned int\000"
 556      676E6564 
 556      20696E74 
 556      00
 557              	.LASF9:
 558 0153 73697A65 		.ascii	"sizetype\000"
 558      74797065 
 558      00
 559              	.LASF21:
 560 015c 2F686F6D 		.ascii	"/home/xxx/projects/armmke_dev1/firmware\000"
 560      652F7878 
 560      782F7072 
 560      6F6A6563 
 560      74732F61 
 561              		.ident	"GCC: (15:4.9.3+svn231177-1) 4.9.3 20150529 (prerelease)"
ARM GAS  /tmp/ccBIy0Oi.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccBIy0Oi.s:18     .text.startup:0000000000000000 $t
     /tmp/ccBIy0Oi.s:23     .text.startup:0000000000000000 main
     /tmp/ccBIy0Oi.s:88     .text.startup:0000000000000040 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
getTicks
